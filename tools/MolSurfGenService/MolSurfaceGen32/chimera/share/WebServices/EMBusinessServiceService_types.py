##################################################
# file: EMBusinessServiceService_types.py
#
# schema types generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#    /home/chimera/chimeraBuild_OSMESA/build/build/bin/wsdl2py EMBusinessService.wsdl
#
##################################################

import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED

##############################
# targetNamespace
# http://service.emsearch.rcsb
##############################

class ns0:
    targetNamespace = "http://service.emsearch.rcsb"

    class findContourLevelByAccessionCode_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "findContourLevelByAccessionCode"
        schema = "http://service.emsearch.rcsb"
        def __init__(self, **kw):
            ns = ns0.findContourLevelByAccessionCode_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"accession_code"), aname="_accession_code", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://service.emsearch.rcsb","findContourLevelByAccessionCode")
            kw["aname"] = "_findContourLevelByAccessionCode"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._accession_code = None
                    return
            Holder.__name__ = "findContourLevelByAccessionCode_Holder"
            self.pyclass = Holder

    class findContourLevelByAccessionCodeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "findContourLevelByAccessionCodeResponse"
        schema = "http://service.emsearch.rcsb"
        def __init__(self, **kw):
            ns = ns0.findContourLevelByAccessionCodeResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"findContourLevelByAccessionCodeReturn"), aname="_findContourLevelByAccessionCodeReturn", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://service.emsearch.rcsb","findContourLevelByAccessionCodeResponse")
            kw["aname"] = "_findContourLevelByAccessionCodeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._findContourLevelByAccessionCodeReturn = None
                    return
            Holder.__name__ = "findContourLevelByAccessionCodeResponse_Holder"
            self.pyclass = Holder

    class findFittedPDBidsByAccessionCode_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "findFittedPDBidsByAccessionCode"
        schema = "http://service.emsearch.rcsb"
        def __init__(self, **kw):
            ns = ns0.findFittedPDBidsByAccessionCode_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"accession_code"), aname="_accession_code", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://service.emsearch.rcsb","findFittedPDBidsByAccessionCode")
            kw["aname"] = "_findFittedPDBidsByAccessionCode"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._accession_code = None
                    return
            Holder.__name__ = "findFittedPDBidsByAccessionCode_Holder"
            self.pyclass = Holder

    class findFittedPDBidsByAccessionCodeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "findFittedPDBidsByAccessionCodeResponse"
        schema = "http://service.emsearch.rcsb"
        def __init__(self, **kw):
            ns = ns0.findFittedPDBidsByAccessionCodeResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"findFittedPDBidsByAccessionCodeReturn"), aname="_findFittedPDBidsByAccessionCodeReturn", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://service.emsearch.rcsb","findFittedPDBidsByAccessionCodeResponse")
            kw["aname"] = "_findFittedPDBidsByAccessionCodeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._findFittedPDBidsByAccessionCodeReturn = None
                    return
            Holder.__name__ = "findFittedPDBidsByAccessionCodeResponse_Holder"
            self.pyclass = Holder

    class getResultSetXMLByAuthor_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getResultSetXMLByAuthor"
        schema = "http://service.emsearch.rcsb"
        def __init__(self, **kw):
            ns = ns0.getResultSetXMLByAuthor_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"authorname"), aname="_authorname", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://service.emsearch.rcsb","getResultSetXMLByAuthor")
            kw["aname"] = "_getResultSetXMLByAuthor"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._authorname = None
                    return
            Holder.__name__ = "getResultSetXMLByAuthor_Holder"
            self.pyclass = Holder

    class getResultSetXMLByAuthorResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getResultSetXMLByAuthorResponse"
        schema = "http://service.emsearch.rcsb"
        def __init__(self, **kw):
            ns = ns0.getResultSetXMLByAuthorResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"getResultSetXMLByAuthorReturn"), aname="_getResultSetXMLByAuthorReturn", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://service.emsearch.rcsb","getResultSetXMLByAuthorResponse")
            kw["aname"] = "_getResultSetXMLByAuthorResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._getResultSetXMLByAuthorReturn = None
                    return
            Holder.__name__ = "getResultSetXMLByAuthorResponse_Holder"
            self.pyclass = Holder

    class getResultSetXMLByID_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getResultSetXMLByID"
        schema = "http://service.emsearch.rcsb"
        def __init__(self, **kw):
            ns = ns0.getResultSetXMLByID_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"accession_code"), aname="_accession_code", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://service.emsearch.rcsb","getResultSetXMLByID")
            kw["aname"] = "_getResultSetXMLByID"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._accession_code = None
                    return
            Holder.__name__ = "getResultSetXMLByID_Holder"
            self.pyclass = Holder

    class getResultSetXMLByIDResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getResultSetXMLByIDResponse"
        schema = "http://service.emsearch.rcsb"
        def __init__(self, **kw):
            ns = ns0.getResultSetXMLByIDResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"getResultSetXMLByIDReturn"), aname="_getResultSetXMLByIDReturn", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://service.emsearch.rcsb","getResultSetXMLByIDResponse")
            kw["aname"] = "_getResultSetXMLByIDResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._getResultSetXMLByIDReturn = None
                    return
            Holder.__name__ = "getResultSetXMLByIDResponse_Holder"
            self.pyclass = Holder

    class getResultSetXMLByTitle_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getResultSetXMLByTitle"
        schema = "http://service.emsearch.rcsb"
        def __init__(self, **kw):
            ns = ns0.getResultSetXMLByTitle_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"title"), aname="_title", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://service.emsearch.rcsb","getResultSetXMLByTitle")
            kw["aname"] = "_getResultSetXMLByTitle"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._title = None
                    return
            Holder.__name__ = "getResultSetXMLByTitle_Holder"
            self.pyclass = Holder

    class getResultSetXMLByTitleResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getResultSetXMLByTitleResponse"
        schema = "http://service.emsearch.rcsb"
        def __init__(self, **kw):
            ns = ns0.getResultSetXMLByTitleResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"getResultSetXMLByTitleReturn"), aname="_getResultSetXMLByTitleReturn", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://service.emsearch.rcsb","getResultSetXMLByTitleResponse")
            kw["aname"] = "_getResultSetXMLByTitleResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._getResultSetXMLByTitleReturn = None
                    return
            Holder.__name__ = "getResultSetXMLByTitleResponse_Holder"
            self.pyclass = Holder

# end class ns0 (tns: http://service.emsearch.rcsb)
