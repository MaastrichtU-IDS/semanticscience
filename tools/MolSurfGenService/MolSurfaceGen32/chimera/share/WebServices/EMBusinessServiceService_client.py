##################################################
# file: EMBusinessServiceService_client.py
# 
# client stubs generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#     /home/chimera/chimeraBuild_OSMESA/build/build/bin/wsdl2py EMBusinessService.wsdl
# 
##################################################

from EMBusinessServiceService_types import *
import urlparse, types
from ZSI.TCcompound import ComplexType, Struct
from ZSI import client
from ZSI.schema import GED, GTD
import ZSI

# Locator
class EMBusinessServiceServiceLocator:
    EMBusinessService_address = "http://emsearch.rutgers.edu/EMSearchWS/services/EMBusinessService"
    def getEMBusinessServiceAddress(self):
        return EMBusinessServiceServiceLocator.EMBusinessService_address
    def getEMBusinessService(self, url=None, **kw):
        return EMBusinessServiceSoapBindingSOAP(url or EMBusinessServiceServiceLocator.EMBusinessService_address, **kw)

# Methods
class EMBusinessServiceSoapBindingSOAP:
    def __init__(self, url, **kw):
        kw.setdefault("readerclass", None)
        kw.setdefault("writerclass", None)
        # no resource properties
        self.binding = client.Binding(url=url, **kw)
        # no ws-addressing

    # op: findContourLevelByAccessionCode
    def findContourLevelByAccessionCode(self, request, **kw):
        if isinstance(request, findContourLevelByAccessionCodeRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(findContourLevelByAccessionCodeResponse.typecode)
        return response

    # op: findFittedPDBidsByAccessionCode
    def findFittedPDBidsByAccessionCode(self, request, **kw):
        if isinstance(request, findFittedPDBidsByAccessionCodeRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(findFittedPDBidsByAccessionCodeResponse.typecode)
        return response

    # op: getResultSetXMLByAuthor
    def getResultSetXMLByAuthor(self, request, **kw):
        if isinstance(request, getResultSetXMLByAuthorRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(getResultSetXMLByAuthorResponse.typecode)
        return response

    # op: getResultSetXMLByID
    def getResultSetXMLByID(self, request, **kw):
        if isinstance(request, getResultSetXMLByIDRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(getResultSetXMLByIDResponse.typecode)
        return response

    # op: getResultSetXMLByTitle
    def getResultSetXMLByTitle(self, request, **kw):
        if isinstance(request, getResultSetXMLByTitleRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(getResultSetXMLByTitleResponse.typecode)
        return response

findContourLevelByAccessionCodeRequest = GED("http://service.emsearch.rcsb", "findContourLevelByAccessionCode").pyclass

findContourLevelByAccessionCodeResponse = GED("http://service.emsearch.rcsb", "findContourLevelByAccessionCodeResponse").pyclass

findFittedPDBidsByAccessionCodeRequest = GED("http://service.emsearch.rcsb", "findFittedPDBidsByAccessionCode").pyclass

findFittedPDBidsByAccessionCodeResponse = GED("http://service.emsearch.rcsb", "findFittedPDBidsByAccessionCodeResponse").pyclass

getResultSetXMLByAuthorRequest = GED("http://service.emsearch.rcsb", "getResultSetXMLByAuthor").pyclass

getResultSetXMLByAuthorResponse = GED("http://service.emsearch.rcsb", "getResultSetXMLByAuthorResponse").pyclass

getResultSetXMLByIDRequest = GED("http://service.emsearch.rcsb", "getResultSetXMLByID").pyclass

getResultSetXMLByIDResponse = GED("http://service.emsearch.rcsb", "getResultSetXMLByIDResponse").pyclass

getResultSetXMLByTitleRequest = GED("http://service.emsearch.rcsb", "getResultSetXMLByTitle").pyclass

getResultSetXMLByTitleResponse = GED("http://service.emsearch.rcsb", "getResultSetXMLByTitleResponse").pyclass
