##################################################
# file: soap_encoding_xsd_types.py
#
# schema types generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#    /home/chimera/chimeraBuild_OSMESA/build/build/bin/wsdl2py -x soap_encoding.xsd
#
##################################################

import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED

##############################
# targetNamespace
# http://schemas.xmlsoap.org/soap/encoding/
##############################

class ns0:
    targetNamespace = "http://schemas.xmlsoap.org/soap/encoding/"

    class arrayCoordinate_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "arrayCoordinate")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class Array_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "Array")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Array_Def.schema
            TClist = [ZSI.TC.AnyElement(aname="_any", minOccurs=0, maxOccurs="unbounded", nillable=False, processContents="lax")]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict[("http://schemas.xmlsoap.org/soap/encoding/","arrayType")] = ZSI.TC.String()
                self.attribute_typecode_dict[("http://schemas.xmlsoap.org/soap/encoding/","offset")] = ns0.arrayCoordinate_Def(None)
                self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
                self.attribute_typecode_dict["href"] = ZSI.TC.URI()
                self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._any = []
                    return
            Holder.__name__ = "Array_Holder"
            self.pyclass = Holder

    class Struct_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "Struct")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Struct_Def.schema
            TClist = [ZSI.TC.AnyElement(aname="_any", minOccurs=0, maxOccurs="unbounded", nillable=False, processContents="lax")]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            else:
                # attribute handling code
                self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
                self.attribute_typecode_dict["href"] = ZSI.TC.URI()
                self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._any = []
                    return
            Holder.__name__ = "Struct_Holder"
            self.pyclass = Holder

    class base64_Def(ZSI.TC.Base64String, TypeDefinition):
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "base64")
        def __init__(self, pname, **kw):
            ZSI.TC.Base64String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class duration_Def(ZSI.TCtimes.Duration, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "duration")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TCtimes.Duration.__init__(self, pname, **kw)
            class Holder(tuple):
                typecode = self
            self.pyclass = Holder

    class dateTime_Def(ZSI.TCtimes.gDateTime, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "dateTime")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TCtimes.gDateTime.__init__(self, pname, **kw)
            class Holder(tuple):
                typecode = self
            self.pyclass = Holder

    class NOTATION_Def(ZSI.TC.QName, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "NOTATION")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TC.QName.__init__(self, pname, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class time_Def(ZSI.TCtimes.gTime, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "time")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TCtimes.gTime.__init__(self, pname, **kw)
            class Holder(tuple):
                typecode = self
            self.pyclass = Holder

    class date_Def(ZSI.TCtimes.gDate, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "date")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TCtimes.gDate.__init__(self, pname, **kw)
            class Holder(tuple):
                typecode = self
            self.pyclass = Holder

    class gYearMonth_Def(ZSI.TCtimes.gYearMonth, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "gYearMonth")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TCtimes.gYearMonth.__init__(self, pname, **kw)
            class Holder(tuple):
                typecode = self
            self.pyclass = Holder

    class gYear_Def(ZSI.TCtimes.gYear, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "gYear")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TCtimes.gYear.__init__(self, pname, **kw)
            class Holder(tuple):
                typecode = self
            self.pyclass = Holder

    class gMonthDay_Def(ZSI.TCtimes.gMonthDay, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "gMonthDay")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TCtimes.gMonthDay.__init__(self, pname, **kw)
            class Holder(tuple):
                typecode = self
            self.pyclass = Holder

    class gDay_Def(ZSI.TCtimes.gDay, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "gDay")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TCtimes.gDay.__init__(self, pname, **kw)
            class Holder(tuple):
                typecode = self
            self.pyclass = Holder

    class gMonth_Def(ZSI.TCtimes.gMonth, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "gMonth")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TCtimes.gMonth.__init__(self, pname, **kw)
            class Holder(tuple):
                typecode = self
            self.pyclass = Holder

    class boolean_Def(ZSI.TC.Boolean, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "boolean")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TC.Boolean.__init__(self, pname, **kw)
            class Holder(int):
                typecode = self
            self.pyclass = Holder

    class base64Binary_Def(ZSI.TC.Base64String, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "base64Binary")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TC.Base64String.__init__(self, pname, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class hexBinary_Def(ZSI.TC.HexBinaryString, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "hexBinary")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TC.HexBinaryString.__init__(self, pname, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class float_Def(ZSI.TCnumbers.FPfloat, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "float")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TCnumbers.FPfloat.__init__(self, pname, **kw)
            class Holder(float):
                typecode = self
            self.pyclass = Holder

    class double_Def(ZSI.TCnumbers.FPdouble, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "double")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TCnumbers.FPdouble.__init__(self, pname, **kw)
            class Holder(float):
                typecode = self
            self.pyclass = Holder

    class anyURI_Def(ZSI.TC.URI, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "anyURI")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TC.URI.__init__(self, pname, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class QName_Def(ZSI.TC.QName, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "QName")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TC.QName.__init__(self, pname, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class string_Def(ZSI.TC.String, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "string")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TC.String.__init__(self, pname, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class normalizedString_Def(ZSI.TC.AnyType, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "normalizedString")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TC.AnyType.__init__(self, pname, **kw)

    class token_Def(ZSI.TC.Token, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "token")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TC.Token.__init__(self, pname, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class language_Def(ZSI.TC.AnyType, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "language")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TC.AnyType.__init__(self, pname, **kw)

    class Name_Def(ZSI.TC.AnyType, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "Name")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TC.AnyType.__init__(self, pname, **kw)

    class NMTOKEN_Def(ZSI.TC.AnyType, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "NMTOKEN")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TC.AnyType.__init__(self, pname, **kw)

    class NCName_Def(ZSI.TC.AnyType, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "NCName")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TC.AnyType.__init__(self, pname, **kw)

    class NMTOKENS_Def(ZSI.TC.AnyType, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "NMTOKENS")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TC.AnyType.__init__(self, pname, **kw)

    class ID_Def(ZSI.TC.AnyType, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "ID")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TC.AnyType.__init__(self, pname, **kw)

    class IDREF_Def(ZSI.TC.AnyType, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "IDREF")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TC.AnyType.__init__(self, pname, **kw)

    class ENTITY_Def(ZSI.TC.AnyType, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "ENTITY")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TC.AnyType.__init__(self, pname, **kw)

    class IDREFS_Def(ZSI.TC.AnyType, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "IDREFS")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TC.AnyType.__init__(self, pname, **kw)

    class ENTITIES_Def(ZSI.TC.AnyType, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "ENTITIES")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TC.AnyType.__init__(self, pname, **kw)

    class decimal_Def(ZSI.TC.Decimal, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "decimal")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TC.Decimal.__init__(self, pname, **kw)
            class Holder(float):
                typecode = self
            self.pyclass = Holder

    class integer_Def(ZSI.TCnumbers.Iinteger, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "integer")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TCnumbers.Iinteger.__init__(self, pname, **kw)
            class Holder(int):
                typecode = self
            self.pyclass = Holder

    class nonPositiveInteger_Def(ZSI.TCnumbers.InonPositiveInteger, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "nonPositiveInteger")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TCnumbers.InonPositiveInteger.__init__(self, pname, **kw)
            class Holder(int):
                typecode = self
            self.pyclass = Holder

    class negativeInteger_Def(ZSI.TCnumbers.InegativeInteger, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "negativeInteger")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TCnumbers.InegativeInteger.__init__(self, pname, **kw)
            class Holder(int):
                typecode = self
            self.pyclass = Holder

    class long_Def(ZSI.TCnumbers.Ilong, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "long")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TCnumbers.Ilong.__init__(self, pname, **kw)
            class Holder(long):
                typecode = self
            self.pyclass = Holder

    class int_Def(ZSI.TCnumbers.Iint, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "int")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TCnumbers.Iint.__init__(self, pname, **kw)
            class Holder(int):
                typecode = self
            self.pyclass = Holder

    class short_Def(ZSI.TCnumbers.Ishort, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "short")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TCnumbers.Ishort.__init__(self, pname, **kw)
            class Holder(int):
                typecode = self
            self.pyclass = Holder

    class byte_Def(ZSI.TCnumbers.Ibyte, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "byte")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TCnumbers.Ibyte.__init__(self, pname, **kw)
            class Holder(int):
                typecode = self
            self.pyclass = Holder

    class nonNegativeInteger_Def(ZSI.TCnumbers.InonNegativeInteger, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "nonNegativeInteger")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TCnumbers.InonNegativeInteger.__init__(self, pname, **kw)
            class Holder(int):
                typecode = self
            self.pyclass = Holder

    class unsignedLong_Def(ZSI.TCnumbers.IunsignedLong, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "unsignedLong")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TCnumbers.IunsignedLong.__init__(self, pname, **kw)
            class Holder(long):
                typecode = self
            self.pyclass = Holder

    class unsignedInt_Def(ZSI.TCnumbers.IunsignedInt, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "unsignedInt")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TCnumbers.IunsignedInt.__init__(self, pname, **kw)
            class Holder(int):
                typecode = self
            self.pyclass = Holder

    class unsignedShort_Def(ZSI.TCnumbers.IunsignedShort, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "unsignedShort")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TCnumbers.IunsignedShort.__init__(self, pname, **kw)
            class Holder(int):
                typecode = self
            self.pyclass = Holder

    class unsignedByte_Def(ZSI.TCnumbers.IunsignedByte, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "unsignedByte")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TCnumbers.IunsignedByte.__init__(self, pname, **kw)
            class Holder(int):
                typecode = self
            self.pyclass = Holder

    class positiveInteger_Def(ZSI.TCnumbers.IpositiveInteger, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        type = (schema, "positiveInteger")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["id"] = ZSI.TC.AnyType()
            self.attribute_typecode_dict["href"] = ZSI.TC.URI()
            self.attribute_typecode_dict[("http://www.w3.org/2001/XMLSchema","anyAttribute")] = ZSI.TC.AnyElement()
            ZSI.TCnumbers.IpositiveInteger.__init__(self, pname, **kw)
            class Holder(int):
                typecode = self
            self.pyclass = Holder

    class Array_Dec(ElementDeclaration):
        literal = "Array"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","Array")
            kw["aname"] = "_Array"
            if ns0.Array_Def not in ns0.Array_Dec.__bases__:
                bases = list(ns0.Array_Dec.__bases__)
                bases.insert(0, ns0.Array_Def)
                ns0.Array_Dec.__bases__ = tuple(bases)

            ns0.Array_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "Array_Dec_Holder"

    class Struct_Dec(ElementDeclaration):
        literal = "Struct"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","Struct")
            kw["aname"] = "_Struct"
            if ns0.Struct_Def not in ns0.Struct_Dec.__bases__:
                bases = list(ns0.Struct_Dec.__bases__)
                bases.insert(0, ns0.Struct_Def)
                ns0.Struct_Dec.__bases__ = tuple(bases)

            ns0.Struct_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "Struct_Dec_Holder"

    class duration_Dec(ElementDeclaration):
        literal = "duration"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","duration")
            kw["aname"] = "_duration"
            if ns0.duration_Def not in ns0.duration_Dec.__bases__:
                bases = list(ns0.duration_Dec.__bases__)
                bases.insert(0, ns0.duration_Def)
                ns0.duration_Dec.__bases__ = tuple(bases)

            ns0.duration_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "duration_Dec_Holder"

    class dateTime_Dec(ElementDeclaration):
        literal = "dateTime"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","dateTime")
            kw["aname"] = "_dateTime"
            if ns0.dateTime_Def not in ns0.dateTime_Dec.__bases__:
                bases = list(ns0.dateTime_Dec.__bases__)
                bases.insert(0, ns0.dateTime_Def)
                ns0.dateTime_Dec.__bases__ = tuple(bases)

            ns0.dateTime_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "dateTime_Dec_Holder"

    class NOTATION_Dec(ElementDeclaration):
        literal = "NOTATION"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","NOTATION")
            kw["aname"] = "_NOTATION"
            if ns0.NOTATION_Def not in ns0.NOTATION_Dec.__bases__:
                bases = list(ns0.NOTATION_Dec.__bases__)
                bases.insert(0, ns0.NOTATION_Def)
                ns0.NOTATION_Dec.__bases__ = tuple(bases)

            ns0.NOTATION_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "NOTATION_Dec_Holder"

    class time_Dec(ElementDeclaration):
        literal = "time"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","time")
            kw["aname"] = "_time"
            if ns0.time_Def not in ns0.time_Dec.__bases__:
                bases = list(ns0.time_Dec.__bases__)
                bases.insert(0, ns0.time_Def)
                ns0.time_Dec.__bases__ = tuple(bases)

            ns0.time_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "time_Dec_Holder"

    class date_Dec(ElementDeclaration):
        literal = "date"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","date")
            kw["aname"] = "_date"
            if ns0.date_Def not in ns0.date_Dec.__bases__:
                bases = list(ns0.date_Dec.__bases__)
                bases.insert(0, ns0.date_Def)
                ns0.date_Dec.__bases__ = tuple(bases)

            ns0.date_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "date_Dec_Holder"

    class gYearMonth_Dec(ElementDeclaration):
        literal = "gYearMonth"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","gYearMonth")
            kw["aname"] = "_gYearMonth"
            if ns0.gYearMonth_Def not in ns0.gYearMonth_Dec.__bases__:
                bases = list(ns0.gYearMonth_Dec.__bases__)
                bases.insert(0, ns0.gYearMonth_Def)
                ns0.gYearMonth_Dec.__bases__ = tuple(bases)

            ns0.gYearMonth_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "gYearMonth_Dec_Holder"

    class gYear_Dec(ElementDeclaration):
        literal = "gYear"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","gYear")
            kw["aname"] = "_gYear"
            if ns0.gYear_Def not in ns0.gYear_Dec.__bases__:
                bases = list(ns0.gYear_Dec.__bases__)
                bases.insert(0, ns0.gYear_Def)
                ns0.gYear_Dec.__bases__ = tuple(bases)

            ns0.gYear_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "gYear_Dec_Holder"

    class gMonthDay_Dec(ElementDeclaration):
        literal = "gMonthDay"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","gMonthDay")
            kw["aname"] = "_gMonthDay"
            if ns0.gMonthDay_Def not in ns0.gMonthDay_Dec.__bases__:
                bases = list(ns0.gMonthDay_Dec.__bases__)
                bases.insert(0, ns0.gMonthDay_Def)
                ns0.gMonthDay_Dec.__bases__ = tuple(bases)

            ns0.gMonthDay_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "gMonthDay_Dec_Holder"

    class gDay_Dec(ElementDeclaration):
        literal = "gDay"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","gDay")
            kw["aname"] = "_gDay"
            if ns0.gDay_Def not in ns0.gDay_Dec.__bases__:
                bases = list(ns0.gDay_Dec.__bases__)
                bases.insert(0, ns0.gDay_Def)
                ns0.gDay_Dec.__bases__ = tuple(bases)

            ns0.gDay_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "gDay_Dec_Holder"

    class gMonth_Dec(ElementDeclaration):
        literal = "gMonth"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","gMonth")
            kw["aname"] = "_gMonth"
            if ns0.gMonth_Def not in ns0.gMonth_Dec.__bases__:
                bases = list(ns0.gMonth_Dec.__bases__)
                bases.insert(0, ns0.gMonth_Def)
                ns0.gMonth_Dec.__bases__ = tuple(bases)

            ns0.gMonth_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "gMonth_Dec_Holder"

    class boolean_Dec(ElementDeclaration):
        literal = "boolean"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","boolean")
            kw["aname"] = "_boolean"
            if ns0.boolean_Def not in ns0.boolean_Dec.__bases__:
                bases = list(ns0.boolean_Dec.__bases__)
                bases.insert(0, ns0.boolean_Def)
                ns0.boolean_Dec.__bases__ = tuple(bases)

            ns0.boolean_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "boolean_Dec_Holder"

    class base64Binary_Dec(ElementDeclaration):
        literal = "base64Binary"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","base64Binary")
            kw["aname"] = "_base64Binary"
            if ns0.base64Binary_Def not in ns0.base64Binary_Dec.__bases__:
                bases = list(ns0.base64Binary_Dec.__bases__)
                bases.insert(0, ns0.base64Binary_Def)
                ns0.base64Binary_Dec.__bases__ = tuple(bases)

            ns0.base64Binary_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "base64Binary_Dec_Holder"

    class hexBinary_Dec(ElementDeclaration):
        literal = "hexBinary"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","hexBinary")
            kw["aname"] = "_hexBinary"
            if ns0.hexBinary_Def not in ns0.hexBinary_Dec.__bases__:
                bases = list(ns0.hexBinary_Dec.__bases__)
                bases.insert(0, ns0.hexBinary_Def)
                ns0.hexBinary_Dec.__bases__ = tuple(bases)

            ns0.hexBinary_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "hexBinary_Dec_Holder"

    class float_Dec(ElementDeclaration):
        literal = "float"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","float")
            kw["aname"] = "_float"
            if ns0.float_Def not in ns0.float_Dec.__bases__:
                bases = list(ns0.float_Dec.__bases__)
                bases.insert(0, ns0.float_Def)
                ns0.float_Dec.__bases__ = tuple(bases)

            ns0.float_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "float_Dec_Holder"

    class double_Dec(ElementDeclaration):
        literal = "double"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","double")
            kw["aname"] = "_double"
            if ns0.double_Def not in ns0.double_Dec.__bases__:
                bases = list(ns0.double_Dec.__bases__)
                bases.insert(0, ns0.double_Def)
                ns0.double_Dec.__bases__ = tuple(bases)

            ns0.double_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "double_Dec_Holder"

    class anyURI_Dec(ElementDeclaration):
        literal = "anyURI"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","anyURI")
            kw["aname"] = "_anyURI"
            if ns0.anyURI_Def not in ns0.anyURI_Dec.__bases__:
                bases = list(ns0.anyURI_Dec.__bases__)
                bases.insert(0, ns0.anyURI_Def)
                ns0.anyURI_Dec.__bases__ = tuple(bases)

            ns0.anyURI_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "anyURI_Dec_Holder"

    class QName_Dec(ElementDeclaration):
        literal = "QName"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","QName")
            kw["aname"] = "_QName"
            if ns0.QName_Def not in ns0.QName_Dec.__bases__:
                bases = list(ns0.QName_Dec.__bases__)
                bases.insert(0, ns0.QName_Def)
                ns0.QName_Dec.__bases__ = tuple(bases)

            ns0.QName_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "QName_Dec_Holder"

    class string_Dec(ElementDeclaration):
        literal = "string"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","string")
            kw["aname"] = "_string"
            if ns0.string_Def not in ns0.string_Dec.__bases__:
                bases = list(ns0.string_Dec.__bases__)
                bases.insert(0, ns0.string_Def)
                ns0.string_Dec.__bases__ = tuple(bases)

            ns0.string_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "string_Dec_Holder"

    class normalizedString_Dec(ElementDeclaration):
        literal = "normalizedString"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","normalizedString")
            kw["aname"] = "_normalizedString"
            if ns0.normalizedString_Def not in ns0.normalizedString_Dec.__bases__:
                bases = list(ns0.normalizedString_Dec.__bases__)
                bases.insert(0, ns0.normalizedString_Def)
                ns0.normalizedString_Dec.__bases__ = tuple(bases)

            ns0.normalizedString_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "normalizedString_Dec_Holder"

    class token_Dec(ElementDeclaration):
        literal = "token"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","token")
            kw["aname"] = "_token"
            if ns0.token_Def not in ns0.token_Dec.__bases__:
                bases = list(ns0.token_Dec.__bases__)
                bases.insert(0, ns0.token_Def)
                ns0.token_Dec.__bases__ = tuple(bases)

            ns0.token_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "token_Dec_Holder"

    class language_Dec(ElementDeclaration):
        literal = "language"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","language")
            kw["aname"] = "_language"
            if ns0.language_Def not in ns0.language_Dec.__bases__:
                bases = list(ns0.language_Dec.__bases__)
                bases.insert(0, ns0.language_Def)
                ns0.language_Dec.__bases__ = tuple(bases)

            ns0.language_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "language_Dec_Holder"

    class Name_Dec(ElementDeclaration):
        literal = "Name"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","Name")
            kw["aname"] = "_Name"
            if ns0.Name_Def not in ns0.Name_Dec.__bases__:
                bases = list(ns0.Name_Dec.__bases__)
                bases.insert(0, ns0.Name_Def)
                ns0.Name_Dec.__bases__ = tuple(bases)

            ns0.Name_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "Name_Dec_Holder"

    class NMTOKEN_Dec(ElementDeclaration):
        literal = "NMTOKEN"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","NMTOKEN")
            kw["aname"] = "_NMTOKEN"
            if ns0.NMTOKEN_Def not in ns0.NMTOKEN_Dec.__bases__:
                bases = list(ns0.NMTOKEN_Dec.__bases__)
                bases.insert(0, ns0.NMTOKEN_Def)
                ns0.NMTOKEN_Dec.__bases__ = tuple(bases)

            ns0.NMTOKEN_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "NMTOKEN_Dec_Holder"

    class NCName_Dec(ElementDeclaration):
        literal = "NCName"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","NCName")
            kw["aname"] = "_NCName"
            if ns0.NCName_Def not in ns0.NCName_Dec.__bases__:
                bases = list(ns0.NCName_Dec.__bases__)
                bases.insert(0, ns0.NCName_Def)
                ns0.NCName_Dec.__bases__ = tuple(bases)

            ns0.NCName_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "NCName_Dec_Holder"

    class NMTOKENS_Dec(ElementDeclaration):
        literal = "NMTOKENS"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","NMTOKENS")
            kw["aname"] = "_NMTOKENS"
            if ns0.NMTOKENS_Def not in ns0.NMTOKENS_Dec.__bases__:
                bases = list(ns0.NMTOKENS_Dec.__bases__)
                bases.insert(0, ns0.NMTOKENS_Def)
                ns0.NMTOKENS_Dec.__bases__ = tuple(bases)

            ns0.NMTOKENS_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "NMTOKENS_Dec_Holder"

    class ID_Dec(ElementDeclaration):
        literal = "ID"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","ID")
            kw["aname"] = "_ID"
            if ns0.ID_Def not in ns0.ID_Dec.__bases__:
                bases = list(ns0.ID_Dec.__bases__)
                bases.insert(0, ns0.ID_Def)
                ns0.ID_Dec.__bases__ = tuple(bases)

            ns0.ID_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ID_Dec_Holder"

    class IDREF_Dec(ElementDeclaration):
        literal = "IDREF"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","IDREF")
            kw["aname"] = "_IDREF"
            if ns0.IDREF_Def not in ns0.IDREF_Dec.__bases__:
                bases = list(ns0.IDREF_Dec.__bases__)
                bases.insert(0, ns0.IDREF_Def)
                ns0.IDREF_Dec.__bases__ = tuple(bases)

            ns0.IDREF_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "IDREF_Dec_Holder"

    class ENTITY_Dec(ElementDeclaration):
        literal = "ENTITY"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","ENTITY")
            kw["aname"] = "_ENTITY"
            if ns0.ENTITY_Def not in ns0.ENTITY_Dec.__bases__:
                bases = list(ns0.ENTITY_Dec.__bases__)
                bases.insert(0, ns0.ENTITY_Def)
                ns0.ENTITY_Dec.__bases__ = tuple(bases)

            ns0.ENTITY_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ENTITY_Dec_Holder"

    class IDREFS_Dec(ElementDeclaration):
        literal = "IDREFS"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","IDREFS")
            kw["aname"] = "_IDREFS"
            if ns0.IDREFS_Def not in ns0.IDREFS_Dec.__bases__:
                bases = list(ns0.IDREFS_Dec.__bases__)
                bases.insert(0, ns0.IDREFS_Def)
                ns0.IDREFS_Dec.__bases__ = tuple(bases)

            ns0.IDREFS_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "IDREFS_Dec_Holder"

    class ENTITIES_Dec(ElementDeclaration):
        literal = "ENTITIES"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","ENTITIES")
            kw["aname"] = "_ENTITIES"
            if ns0.ENTITIES_Def not in ns0.ENTITIES_Dec.__bases__:
                bases = list(ns0.ENTITIES_Dec.__bases__)
                bases.insert(0, ns0.ENTITIES_Def)
                ns0.ENTITIES_Dec.__bases__ = tuple(bases)

            ns0.ENTITIES_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ENTITIES_Dec_Holder"

    class decimal_Dec(ElementDeclaration):
        literal = "decimal"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","decimal")
            kw["aname"] = "_decimal"
            if ns0.decimal_Def not in ns0.decimal_Dec.__bases__:
                bases = list(ns0.decimal_Dec.__bases__)
                bases.insert(0, ns0.decimal_Def)
                ns0.decimal_Dec.__bases__ = tuple(bases)

            ns0.decimal_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "decimal_Dec_Holder"

    class integer_Dec(ElementDeclaration):
        literal = "integer"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","integer")
            kw["aname"] = "_integer"
            if ns0.integer_Def not in ns0.integer_Dec.__bases__:
                bases = list(ns0.integer_Dec.__bases__)
                bases.insert(0, ns0.integer_Def)
                ns0.integer_Dec.__bases__ = tuple(bases)

            ns0.integer_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "integer_Dec_Holder"

    class nonPositiveInteger_Dec(ElementDeclaration):
        literal = "nonPositiveInteger"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","nonPositiveInteger")
            kw["aname"] = "_nonPositiveInteger"
            if ns0.nonPositiveInteger_Def not in ns0.nonPositiveInteger_Dec.__bases__:
                bases = list(ns0.nonPositiveInteger_Dec.__bases__)
                bases.insert(0, ns0.nonPositiveInteger_Def)
                ns0.nonPositiveInteger_Dec.__bases__ = tuple(bases)

            ns0.nonPositiveInteger_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "nonPositiveInteger_Dec_Holder"

    class negativeInteger_Dec(ElementDeclaration):
        literal = "negativeInteger"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","negativeInteger")
            kw["aname"] = "_negativeInteger"
            if ns0.negativeInteger_Def not in ns0.negativeInteger_Dec.__bases__:
                bases = list(ns0.negativeInteger_Dec.__bases__)
                bases.insert(0, ns0.negativeInteger_Def)
                ns0.negativeInteger_Dec.__bases__ = tuple(bases)

            ns0.negativeInteger_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "negativeInteger_Dec_Holder"

    class long_Dec(ElementDeclaration):
        literal = "long"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","long")
            kw["aname"] = "_long"
            if ns0.long_Def not in ns0.long_Dec.__bases__:
                bases = list(ns0.long_Dec.__bases__)
                bases.insert(0, ns0.long_Def)
                ns0.long_Dec.__bases__ = tuple(bases)

            ns0.long_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "long_Dec_Holder"

    class int_Dec(ElementDeclaration):
        literal = "int"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","int")
            kw["aname"] = "_int"
            if ns0.int_Def not in ns0.int_Dec.__bases__:
                bases = list(ns0.int_Dec.__bases__)
                bases.insert(0, ns0.int_Def)
                ns0.int_Dec.__bases__ = tuple(bases)

            ns0.int_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "int_Dec_Holder"

    class short_Dec(ElementDeclaration):
        literal = "short"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","short")
            kw["aname"] = "_short"
            if ns0.short_Def not in ns0.short_Dec.__bases__:
                bases = list(ns0.short_Dec.__bases__)
                bases.insert(0, ns0.short_Def)
                ns0.short_Dec.__bases__ = tuple(bases)

            ns0.short_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "short_Dec_Holder"

    class byte_Dec(ElementDeclaration):
        literal = "byte"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","byte")
            kw["aname"] = "_byte"
            if ns0.byte_Def not in ns0.byte_Dec.__bases__:
                bases = list(ns0.byte_Dec.__bases__)
                bases.insert(0, ns0.byte_Def)
                ns0.byte_Dec.__bases__ = tuple(bases)

            ns0.byte_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "byte_Dec_Holder"

    class nonNegativeInteger_Dec(ElementDeclaration):
        literal = "nonNegativeInteger"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","nonNegativeInteger")
            kw["aname"] = "_nonNegativeInteger"
            if ns0.nonNegativeInteger_Def not in ns0.nonNegativeInteger_Dec.__bases__:
                bases = list(ns0.nonNegativeInteger_Dec.__bases__)
                bases.insert(0, ns0.nonNegativeInteger_Def)
                ns0.nonNegativeInteger_Dec.__bases__ = tuple(bases)

            ns0.nonNegativeInteger_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "nonNegativeInteger_Dec_Holder"

    class unsignedLong_Dec(ElementDeclaration):
        literal = "unsignedLong"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","unsignedLong")
            kw["aname"] = "_unsignedLong"
            if ns0.unsignedLong_Def not in ns0.unsignedLong_Dec.__bases__:
                bases = list(ns0.unsignedLong_Dec.__bases__)
                bases.insert(0, ns0.unsignedLong_Def)
                ns0.unsignedLong_Dec.__bases__ = tuple(bases)

            ns0.unsignedLong_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "unsignedLong_Dec_Holder"

    class unsignedInt_Dec(ElementDeclaration):
        literal = "unsignedInt"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","unsignedInt")
            kw["aname"] = "_unsignedInt"
            if ns0.unsignedInt_Def not in ns0.unsignedInt_Dec.__bases__:
                bases = list(ns0.unsignedInt_Dec.__bases__)
                bases.insert(0, ns0.unsignedInt_Def)
                ns0.unsignedInt_Dec.__bases__ = tuple(bases)

            ns0.unsignedInt_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "unsignedInt_Dec_Holder"

    class unsignedShort_Dec(ElementDeclaration):
        literal = "unsignedShort"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","unsignedShort")
            kw["aname"] = "_unsignedShort"
            if ns0.unsignedShort_Def not in ns0.unsignedShort_Dec.__bases__:
                bases = list(ns0.unsignedShort_Dec.__bases__)
                bases.insert(0, ns0.unsignedShort_Def)
                ns0.unsignedShort_Dec.__bases__ = tuple(bases)

            ns0.unsignedShort_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "unsignedShort_Dec_Holder"

    class unsignedByte_Dec(ElementDeclaration):
        literal = "unsignedByte"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","unsignedByte")
            kw["aname"] = "_unsignedByte"
            if ns0.unsignedByte_Def not in ns0.unsignedByte_Dec.__bases__:
                bases = list(ns0.unsignedByte_Dec.__bases__)
                bases.insert(0, ns0.unsignedByte_Def)
                ns0.unsignedByte_Dec.__bases__ = tuple(bases)

            ns0.unsignedByte_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "unsignedByte_Dec_Holder"

    class positiveInteger_Dec(ElementDeclaration):
        literal = "positiveInteger"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","positiveInteger")
            kw["aname"] = "_positiveInteger"
            if ns0.positiveInteger_Def not in ns0.positiveInteger_Dec.__bases__:
                bases = list(ns0.positiveInteger_Dec.__bases__)
                bases.insert(0, ns0.positiveInteger_Def)
                ns0.positiveInteger_Dec.__bases__ = tuple(bases)

            ns0.positiveInteger_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "positiveInteger_Dec_Holder"

    class anyType_Dec(ZSI.TC.AnyType, ElementDeclaration):
        literal = "anyType"
        schema = "http://schemas.xmlsoap.org/soap/encoding/"
        def __init__(self, **kw):
            kw["pname"] = ("http://schemas.xmlsoap.org/soap/encoding/","anyType")
            kw["aname"] = "_anyType"
            ZSI.TC.AnyType.__init__(self, **kw)

# end class ns0 (tns: http://schemas.xmlsoap.org/soap/encoding/)
