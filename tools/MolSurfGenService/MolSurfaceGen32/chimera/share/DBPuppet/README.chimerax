The Chimera web data mechanism defines a 'standard format',
that client databases could use to send their data to Chimera. 

This format can basically accomplish three actions within Chimera: 

    (1) retrieve files from the web and open them - provided they are in
    a Chimera-supported format

    (2) retrieve files from the RCSB via PDB identifier codes and open
    them

    (3) execute arbitrary chimera (Midas) commands

This document will describe this format, and how to use it. 
This will be done by using a documented example.

If you are familiar with document type descriptors, you can take a look
at the file std_webdata.dtd (in $CHIMERA/share/DBPuppet) for a more
precise definition, but the walkthrough here will be enough to enable
you to write your own .chimerax files.

The file that will be used to introduce this format is
'test_std.chimerax', located in the $CHIMERA/share/DBPuppet directory of
your Chimera installation. This is an example of a 'Chimera web data'
file. These files have the extension '.chimerax' and the MIME-type
'application/x-chimerax'.

Important side note:

    If you are a webmaster or database administrator, note that you must
    include this mime-type in your server configuration file so that
    the server knows to serve up this file with the correct mime-type.
    Alternatively, if you are using a CGI script to generate these files
    on the fly, make sure to include a 'Content-type' header.


The file is in XML format, as noted by the "<?xml version="1.0"?>" line
at the top .

     <?xml version="1.0"?>

For more on XML files, see www.xml.org or any other website that gives
you an introduction to XML.


################
#ChimeraPuppet #
################

The next tag, "ChimeraPuppet", defines a specific "type" attribute,
which is derived from the name of the file (minus the .py suffix) that
will be used to handle the file once it is received by Chimera.

       <ChimeraPuppet type="std_webdata">

For example, our example file has a type 'std_webdata', so it will use
the std_webdata.py file as a handler. It is *crucial* that the text
contained in the 'type' attribute is exactly the same as the name of the
handler for this type of ".chimerax" file.

I highly recommend using the "std_webdata" type, unless you write a
different handler (see modbase.py and sfld.py for more examples).
basically, Chimera calls a "handle_file" method at the top level of
the handler file, which then proceeds to parse the file, extract the
relevant information, then open the requested files and execute the
proper midas commands. Writing your own handler takes a decent level
of familiarity with Python, but feel free to try if the "std_webdata"
format does not suit your purposes.

#############
# web files #
#############

The next tag "web_files" specifies which files need to be downloaded
from the web. This tag can have zero or more sub-tags named "file". Each
"file" tag must have three attributes: 'name' which contains the name of
the file to which the url will be saved locally, 'format', which must
be either 'text', if the url is in plain text, or 'html', if the url is
between <pre></pre> tags in an html file, and 'loc' which contains the
URL to the file.

   <web_files>
      <file name="3fx2.pdb" format="text" loc="http://www.cgl.ucsf.edu/home/dan/3FX2.pdb" />
   </web_files>

#############
# PDB files #
#############

The "pdb_files" tag contains pdb ids for models that should be fetched
from the RCSB. It can have zero or more sub-tags named "pdb". Each "pdb"
tag has an attribute 'id' that is the PDB identifier for that model.

   <pdb_files>
      <pdb id="1gcn" />
   </pdb_files>



############
# Commands #
############

The last bit of information contained in this file is the "commands" tag.
This tag can have two-sub tags:

    (1) zero or more sub-tags named "mid_cmd", each of which contains
    text which is a midas command that should be executed after the
    above models have been opened. Any atom specifiers should be
    relative to what was opened due to the content of the previous tags.

    (2) zero or more sub-tags named "py_cmd", each of which contains
    a block of text which will be interpreted as Python code. If the
    python code spans more than one line (which is legal), make sure
    that all spacing is consistent within that block of text (e.g. all
    code within a 'for' loop has the same indent, etc.)

Each command in the <commands> section will be executed sequentially,
and it is OK to intersperse <py_cmd> and <mid_cmd> tags .

   <commands>
     <mid_cmd>repr stick</mid_cmd>
     <mid_cmd>scale 2</mid_cmd>
     <py_cmd> m = chimera.openModels.list()[0] </py_cmd>
     <py_cmd> m.color = chimera.Color.lookup('blue') </py_cmd>
   </commands>




Close the "ChimeraPuppet" tag to specify that there is no more information here

   </ChimeraPuppet>




Assuming the server is configured properly, and
your web browser has been properly configured (see
http://www.cgl.ucsf.edu/home/meng/docs/ContributedSoftware/webdata/webdata.html
for more information about how to use the Chimera web data
feature), clicking on a link to a '.chimerax' file from your web browser
should result in either 1) an already running instance of Chimera
opening the desired data, or, if Chimera is not currently running on
your system, 2) a new copy of Chimera starting up and opening the
desired data.
