def get_ccd(residue):
	f = _getCache(residue)
	if f is not None:
		return f
	data = _getWebService(residue)
	if not data:
		return None
	_saveCache(residue, data)
	try:
		import cStringIO as StringIO
	except ImportError:
		import StringIO
	return StringIO.StringIO(data)

def _getCache(residue):
	dir = _getCacheDir()
	if not dir:
		return None
	import os.path
	path = os.path.join(dir, residue)
	try:
		return open(path)
	except IOError:
		return None

def _saveCache(residue, data):
	dir = _getCacheDir()
	if not dir:
		return
	import os.path, os
	if not os.path.exists(dir):
		try:
			os.mkdir(dir)
		except os.error:
			return
	path = os.path.join(dir, residue)
	try:
		f = open(path, "w")
	except IOError:
		pass
	else:
		f.write(data)
		f.close()

_cacheDir = None
def _getCacheDir():
	global _cacheDir
	if _cacheDir is None:
		import chimera
		pf = chimera.pathFinder()
		paths = pf.pathList("", "ccdcache", False, False, True)
		if paths:
			_cacheDir = paths[0]
		else:
			_cacheDir = ""
	return _cacheDir

def _getWebService(residue):
	from WebServices.AppService_types import ns0
	from WebServices.opal_client import OpalService
	service = "ccd_catServicePort"
	argList = "%s" % residue
	opal = OpalService(service)
	status, fileMap = opal.launchJobBlocking(argList)
	opal.destroy()
	if not status:
		return None
	import urllib2
	f = urllib2.urlopen(fileMap["stdout.txt"])
	data = f.read()
	f.close()
	return data
