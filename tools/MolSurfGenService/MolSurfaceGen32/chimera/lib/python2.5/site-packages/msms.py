# This file was created automatically by SWIG.
import msmsc
class RSEPtr :
    def __init__(self,this):
        self.this = this
        self.thisown = 0
    def _rsf0(self, *_args, **_kwargs):
        """"""
        val = apply(msmsc.RSE__rsf0,(self,) + _args, _kwargs)
        if val: val = RSFPtr(val) 
        return val
    def _rsf1(self, *_args, **_kwargs):
        """"""
        val = apply(msmsc.RSE__rsf1,(self,) + _args, _kwargs)
        if val: val = RSFPtr(val) 
        return val
    def _rsedual0(self, *_args, **_kwargs):
        """"""
        val = apply(msmsc.RSE__rsedual0,(self,) + _args, _kwargs)
        if val: val = SESFPtr(val) 
        return val
    def _rsedual1(self, *_args, **_kwargs):
        """"""
        val = apply(msmsc.RSE__rsedual1,(self,) + _args, _kwargs)
        if val: val = SESFPtr(val) 
        return val
    def _n(self, *_args, **_kwargs):
        """"""
        val = apply(msmsc.RSE__n,(self,) + _args, _kwargs)
        return val
    def _ct(self, *_args, **_kwargs):
        """"""
        val = apply(msmsc.RSE__ct,(self,) + _args, _kwargs)
        return val
    def _cp(self, *_args, **_kwargs):
        """"""
        val = apply(msmsc.RSE__cp,(self,) + _args, _kwargs)
        return val
    def _cc(self, *_args, **_kwargs):
        """"""
        val = apply(msmsc.RSE__cc,(self,) + _args, _kwargs)
        return val
    def _rcc(self, *_args, **_kwargs):
        """"""
        val = apply(msmsc.RSE__rcc,(self,) + _args, _kwargs)
        return val
    def _ps(self, *_args, **_kwargs):
        """"""
        val = apply(msmsc.RSE__ps,(self,) + _args, _kwargs)
        return val
    def _s(self, *_args, **_kwargs):
        """"""
        val = apply(msmsc.RSE__s,(self,) + _args, _kwargs)
        return val
    def __setattr__(self,name,value):
        if name == "nxt" :
            msmsc.RSE_nxt_set(self,value.this)
            return
        if name == "prv" :
            msmsc.RSE_prv_set(self,value.this)
            return
        if name == "f" :
            msmsc.RSE_f_set(self,value)
            return
        if name == "rsedual" :
            msmsc.RSE_rsedual_set(self,value)
            return
        if name == "nxtUp" :
            msmsc.RSE_nxtUp_set(self,value.this)
            return
        if name == "data" :
            msmsc.RSE_data_set(self,value)
            return
        if name == "n" :
            msmsc.RSE_n_set(self,value)
            return
        if name == "ct" :
            msmsc.RSE_ct_set(self,value)
            return
        if name == "rt" :
            msmsc.RSE_rt_set(self,value)
            return
        if name == "cp" :
            msmsc.RSE_cp_set(self,value)
            return
        if name == "angt" :
            msmsc.RSE_angt_set(self,value)
            return
        if name == "cc" :
            msmsc.RSE_cc_set(self,value)
            return
        if name == "rcc" :
            msmsc.RSE_rcc_set(self,value)
            return
        if name == "ps" :
            msmsc.RSE_ps_set(self,value)
            return
        if name == "s" :
            msmsc.RSE_s_set(self,value)
            return
        if name == "num" :
            msmsc.RSE_num_set(self,value)
            return
        if name == "sing" :
            msmsc.RSE_sing_set(self,value)
            return
        if name == "comp_num" :
            msmsc.RSE_comp_num_set(self,value)
            return
        if name == "type" :
            msmsc.RSE_type_set(self,value)
            return
        self.__dict__[name] = value
    def __getattr__(self,name):
        if name == "nxt" : 
            return RSEPtr(msmsc.RSE_nxt_get(self))
        if name == "prv" : 
            return RSEPtr(msmsc.RSE_prv_get(self))
        if name == "f" : 
            return msmsc.RSE_f_get(self)
        if name == "rsedual" : 
            return msmsc.RSE_rsedual_get(self)
        if name == "nxtUp" : 
            return RSEPtr(msmsc.RSE_nxtUp_get(self))
        if name == "data" : 
            return msmsc.RSE_data_get(self)
        if name == "n" : 
            return msmsc.RSE_n_get(self)
        if name == "ct" : 
            return msmsc.RSE_ct_get(self)
        if name == "rt" : 
            return msmsc.RSE_rt_get(self)
        if name == "cp" : 
            return msmsc.RSE_cp_get(self)
        if name == "angt" : 
            return msmsc.RSE_angt_get(self)
        if name == "cc" : 
            return msmsc.RSE_cc_get(self)
        if name == "rcc" : 
            return msmsc.RSE_rcc_get(self)
        if name == "ps" : 
            return msmsc.RSE_ps_get(self)
        if name == "s" : 
            return msmsc.RSE_s_get(self)
        if name == "num" : 
            return msmsc.RSE_num_get(self)
        if name == "sing" : 
            return msmsc.RSE_sing_get(self)
        if name == "comp_num" : 
            return msmsc.RSE_comp_num_get(self)
        if name == "type" : 
            return msmsc.RSE_type_get(self)
        raise AttributeError,name
    def __repr__(self):
        return "<C RSE instance at %s>" % (self.this,)
class RSE(RSEPtr):
    """RS edges   
"""
    def __init__(self,this):
        self.this = this




class RSVPtr :
    def __init__(self,this):
        self.this = this
        self.thisown = 0
    def get_a(self, *_args, **_kwargs):
        """"""
        val = apply(msmsc.RSV_get_a,(self,) + _args, _kwargs)
        if val: val = RSEPtr(val) 
        return val
    def get_rsvdual(self, *_args, **_kwargs):
        """"""
        val = apply(msmsc.RSV_get_rsvdual,(self,) + _args, _kwargs)
        if val: val = SESFPtr(val) 
        return val
    def _x(self, *_args, **_kwargs):
        """"""
        val = apply(msmsc.RSV__x,(self,) + _args, _kwargs)
        return val
    def get_ses_area(self, *_args, **_kwargs):
        """"""
        val = apply(msmsc.RSV_get_ses_area,(self,) + _args, _kwargs)
        return val
    def get_sas_area(self, *_args, **_kwargs):
        """"""
        val = apply(msmsc.RSV_get_sas_area,(self,) + _args, _kwargs)
        return val
    def __setattr__(self,name,value):
        if name == "a" :
            msmsc.RSV_a_set(self,value)
            return
        if name == "rs" :
            msmsc.RSV_rs_set(self,value.this)
            return
        if name == "rsvdual" :
            msmsc.RSV_rsvdual_set(self,value)
            return
        if name == "data" :
            msmsc.RSV_data_set(self,value)
            return
        if name == "ses_area" :
            msmsc.RSV_ses_area_set(self,value)
            return
        if name == "sas_area" :
            msmsc.RSV_sas_area_set(self,value)
            return
        if name == "x" :
            msmsc.RSV_x_set(self,value)
            return
        if name == "r" :
            msmsc.RSV_r_set(self,value)
            return
        if name == "orig_r" :
            msmsc.RSV_orig_r_set(self,value)
            return
        if name == "bhtind" :
            msmsc.RSV_bhtind_set(self,value)
            return
        if name == "num" :
            msmsc.RSV_num_set(self,value)
            return
        if name == "nxt" :
            msmsc.RSV_nxt_set(self,value)
            return
        if name == "nxtup" :
            msmsc.RSV_nxtup_set(self,value)
            return
        if name == "type" :
            msmsc.RSV_type_set(self,value)
            return
        if name == "mnba" :
            msmsc.RSV_mnba_set(self,value)
            return
        if name == "nba" :
            msmsc.RSV_nba_set(self,value)
            return
        if name == "nbf" :
            msmsc.RSV_nbf_set(self,value)
            return
        if name == "pb" :
            msmsc.RSV_pb_set(self,value)
            return
        if name == "surf" :
            msmsc.RSV_surf_set(self,value)
            return
        if name == "comp_num" :
            msmsc.RSV_comp_num_set(self,value)
            return
        if name == "free_edge_checked" :
            msmsc.RSV_free_edge_checked_set(self,value)
            return
        if name == "split" :
            msmsc.RSV_split_set(self,value)
            return
        if name == "name" :
            msmsc.RSV_name_set(self,value)
            return
        self.__dict__[name] = value
    def __getattr__(self,name):
        if name == "a" : 
            return msmsc.RSV_a_get(self)
        if name == "rs" : 
            return RSPtr(msmsc.RSV_rs_get(self))
        if name == "rsvdual" : 
            return msmsc.RSV_rsvdual_get(self)
        if name == "data" : 
            return msmsc.RSV_data_get(self)
        if name == "ses_area" : 
            return msmsc.RSV_ses_area_get(self)
        if name == "sas_area" : 
            return msmsc.RSV_sas_area_get(self)
        if name == "x" : 
            return msmsc.RSV_x_get(self)
        if name == "r" : 
            return msmsc.RSV_r_get(self)
        if name == "orig_r" : 
            return msmsc.RSV_orig_r_get(self)
        if name == "bhtind" : 
            return msmsc.RSV_bhtind_get(self)
        if name == "num" : 
            return msmsc.RSV_num_get(self)
        if name == "nxt" : 
            return msmsc.RSV_nxt_get(self)
        if name == "nxtup" : 
            return msmsc.RSV_nxtup_get(self)
        if name == "type" : 
            return msmsc.RSV_type_get(self)
        if name == "mnba" : 
            return msmsc.RSV_mnba_get(self)
        if name == "nba" : 
            return msmsc.RSV_nba_get(self)
        if name == "nbf" : 
            return msmsc.RSV_nbf_get(self)
        if name == "pb" : 
            return msmsc.RSV_pb_get(self)
        if name == "surf" : 
            return msmsc.RSV_surf_get(self)
        if name == "comp_num" : 
            return msmsc.RSV_comp_num_get(self)
        if name == "free_edge_checked" : 
            return msmsc.RSV_free_edge_checked_get(self)
        if name == "split" : 
            return msmsc.RSV_split_get(self)
        if name == "name" : 
            return msmsc.RSV_name_get(self)
        raise AttributeError,name
    def __repr__(self):
        return "<C RSV instance at %s>" % (self.this,)
class RSV(RSVPtr):
    """RS vertex   
"""
    def __init__(self,this):
        self.this = this




class RSFPtr :
    def __init__(self,this):
        self.this = this
        self.thisown = 0
    def _a0(self, *_args, **_kwargs):
        """"""
        val = apply(msmsc.RSF__a0,(self,) + _args, _kwargs)
        if val: val = RSEPtr(val) 
        return val
    def _a1(self, *_args, **_kwargs):
        """"""
        val = apply(msmsc.RSF__a1,(self,) + _args, _kwargs)
        if val: val = RSEPtr(val) 
        return val
    def _a2(self, *_args, **_kwargs):
        """"""
        val = apply(msmsc.RSF__a2,(self,) + _args, _kwargs)
        if val: val = RSEPtr(val) 
        return val
    def _rsfdual0(self, *_args, **_kwargs):
        """"""
        val = apply(msmsc.RSF__rsfdual0,(self,) + _args, _kwargs)
        if val: val = SESFPtr(val) 
        return val
    def _rsfdual1(self, *_args, **_kwargs):
        """"""
        val = apply(msmsc.RSF__rsfdual1,(self,) + _args, _kwargs)
        if val: val = SESFPtr(val) 
        return val
    def _v(self, *_args, **_kwargs):
        """"""
        val = apply(msmsc.RSF__v,(self,) + _args, _kwargs)
        return val
    def _c(self, *_args, **_kwargs):
        """"""
        val = apply(msmsc.RSF__c,(self,) + _args, _kwargs)
        return val
    def _s(self, *_args, **_kwargs):
        """"""
        val = apply(msmsc.RSF__s,(self,) + _args, _kwargs)
        return val
    def _dir(self, *_args, **_kwargs):
        """"""
        val = apply(msmsc.RSF__dir,(self,) + _args, _kwargs)
        return val
    def __setattr__(self,name,value):
        if name == "nxt" :
            msmsc.RSF_nxt_set(self,value.this)
            return
        if name == "prv" :
            msmsc.RSF_prv_set(self,value.this)
            return
        if name == "a" :
            msmsc.RSF_a_set(self,value)
            return
        if name == "rsfdual" :
            msmsc.RSF_rsfdual_set(self,value)
            return
        if name == "fs" :
            msmsc.RSF_fs_set(self,value.this)
            return
        if name == "nxtUp" :
            msmsc.RSF_nxtUp_set(self,value.this)
            return
        if name == "nxtbUp" :
            msmsc.RSF_nxtbUp_set(self,value.this)
            return
        if name == "data" :
            msmsc.RSF_data_set(self,value)
            return
        if name == "v" :
            msmsc.RSF_v_set(self,value)
            return
        if name == "c" :
            msmsc.RSF_c_set(self,value)
            return
        if name == "s" :
            msmsc.RSF_s_set(self,value)
            return
        if name == "num" :
            msmsc.RSF_num_set(self,value)
            return
        if name == "uind" :
            msmsc.RSF_uind_set(self,value)
            return
        if name == "sind" :
            msmsc.RSF_sind_set(self,value)
            return
        if name == "comp_num" :
            msmsc.RSF_comp_num_set(self,value)
            return
        if name == "cp" :
            msmsc.RSF_cp_set(self,value)
            return
        if name == "mfl" :
            msmsc.RSF_mfl_set(self,value)
            return
        if name == "dir" :
            msmsc.RSF_dir_set(self,value)
            return
        self.__dict__[name] = value
    def __getattr__(self,name):
        if name == "nxt" : 
            return RSFPtr(msmsc.RSF_nxt_get(self))
        if name == "prv" : 
            return RSFPtr(msmsc.RSF_prv_get(self))
        if name == "a" : 
            return msmsc.RSF_a_get(self)
        if name == "rsfdual" : 
            return msmsc.RSF_rsfdual_get(self)
        if name == "fs" : 
            return RSFPtr(msmsc.RSF_fs_get(self))
        if name == "nxtUp" : 
            return RSFPtr(msmsc.RSF_nxtUp_get(self))
        if name == "nxtbUp" : 
            return RSFPtr(msmsc.RSF_nxtbUp_get(self))
        if name == "data" : 
            return msmsc.RSF_data_get(self)
        if name == "v" : 
            return msmsc.RSF_v_get(self)
        if name == "c" : 
            return msmsc.RSF_c_get(self)
        if name == "s" : 
            return msmsc.RSF_s_get(self)
        if name == "num" : 
            return msmsc.RSF_num_get(self)
        if name == "uind" : 
            return msmsc.RSF_uind_get(self)
        if name == "sind" : 
            return msmsc.RSF_sind_get(self)
        if name == "comp_num" : 
            return msmsc.RSF_comp_num_get(self)
        if name == "cp" : 
            return msmsc.RSF_cp_get(self)
        if name == "mfl" : 
            return msmsc.RSF_mfl_get(self)
        if name == "dir" : 
            return msmsc.RSF_dir_get(self)
        raise AttributeError,name
    def __repr__(self):
        return "<C RSF instance at %s>" % (self.this,)
class RSF(RSFPtr):
    """RS face   
"""
    def __init__(self,this):
        self.this = this




class RSPtr :
    def __init__(self,this):
        self.this = this
        self.thisown = 0
    def _dir(self, *_args, **_kwargs):
        """"""
        val = apply(msmsc.RS__dir,(self,) + _args, _kwargs)
        return val
    def __setattr__(self,name,value):
        if name == "nxt" :
            msmsc.RS_nxt_set(self,value.this)
            return
        if name == "prv" :
            msmsc.RS_prv_set(self,value.this)
            return
        if name == "ses" :
            msmsc.RS_ses_set(self,value.this)
            return
        if name == "ffa" :
            msmsc.RS_ffa_set(self,value.this)
            return
        if name == "lfa" :
            msmsc.RS_lfa_set(self,value.this)
            return
        if name == "lorsf" :
            msmsc.RS_lorsf_set(self,value.this)
            return
        if name == "far" :
            msmsc.RS_far_set(self,value.this)
            return
        if name == "lar" :
            msmsc.RS_lar_set(self,value.this)
            return
        if name == "ffar" :
            msmsc.RS_ffar_set(self,value.this)
            return
        if name == "lfar" :
            msmsc.RS_lfar_set(self,value.this)
            return
        if name == "fstrfup" :
            msmsc.RS_fstrfup_set(self,value.this)
            return
        if name == "lstrfup" :
            msmsc.RS_lstrfup_set(self,value.this)
            return
        if name == "fstreup" :
            msmsc.RS_fstreup_set(self,value.this)
            return
        if name == "lstreup" :
            msmsc.RS_lstreup_set(self,value.this)
            return
        if name == "fstRSbfup" :
            msmsc.RS_fstRSbfup_set(self,value.this)
            return
        if name == "lstRSbfup" :
            msmsc.RS_lstRSbfup_set(self,value.this)
            return
        if name == "fstfup" :
            msmsc.RS_fstfup_set(self,value.this)
            return
        if name == "lstfup" :
            msmsc.RS_lstfup_set(self,value.this)
            return
        if name == "fsteup" :
            msmsc.RS_fsteup_set(self,value.this)
            return
        if name == "lsteup" :
            msmsc.RS_lsteup_set(self,value.this)
            return
        if name == "uprbRBHT" :
            msmsc.RS_uprbRBHT_set(self,value)
            return
        if name == "sprbRBHT" :
            msmsc.RS_sprbRBHT_set(self,value)
            return
        if name == "data" :
            msmsc.RS_data_set(self,value)
            return
        if name == "nbfcp" :
            msmsc.RS_nbfcp_set(self,value)
            return
        if name == "nbfco" :
            msmsc.RS_nbfco_set(self,value)
            return
        if name == "nbf" :
            msmsc.RS_nbf_set(self,value)
            return
        if name == "nba" :
            msmsc.RS_nba_set(self,value)
            return
        if name == "nbaf" :
            msmsc.RS_nbaf_set(self,value)
            return
        if name == "nbs" :
            msmsc.RS_nbs_set(self,value)
            return
        if name == "num" :
            msmsc.RS_num_set(self,value)
            return
        if name == "ffat" :
            msmsc.RS_ffat_set(self,value)
            return
        if name == "needFreeEdgeCheck" :
            msmsc.RS_needFreeEdgeCheck_set(self,value)
            return
        if name == "split_rsv" :
            msmsc.RS_split_rsv_set(self,value)
            return
        self.__dict__[name] = value
    def __getattr__(self,name):
        if name == "nxt" : 
            return RSPtr(msmsc.RS_nxt_get(self))
        if name == "prv" : 
            return RSPtr(msmsc.RS_prv_get(self))
        if name == "ses" : 
            return SESPtr(msmsc.RS_ses_get(self))
        if name == "ffa" : 
            return RSFPtr(msmsc.RS_ffa_get(self))
        if name == "lfa" : 
            return RSFPtr(msmsc.RS_lfa_get(self))
        if name == "lorsf" : 
            return RSFPtr(msmsc.RS_lorsf_get(self))
        if name == "far" : 
            return RSEPtr(msmsc.RS_far_get(self))
        if name == "lar" : 
            return RSEPtr(msmsc.RS_lar_get(self))
        if name == "ffar" : 
            return RSEPtr(msmsc.RS_ffar_get(self))
        if name == "lfar" : 
            return RSEPtr(msmsc.RS_lfar_get(self))
        if name == "fstrfup" : 
            return RSFPtr(msmsc.RS_fstrfup_get(self))
        if name == "lstrfup" : 
            return RSFPtr(msmsc.RS_lstrfup_get(self))
        if name == "fstreup" : 
            return RSEPtr(msmsc.RS_fstreup_get(self))
        if name == "lstreup" : 
            return RSEPtr(msmsc.RS_lstreup_get(self))
        if name == "fstRSbfup" : 
            return RSFPtr(msmsc.RS_fstRSbfup_get(self))
        if name == "lstRSbfup" : 
            return RSFPtr(msmsc.RS_lstRSbfup_get(self))
        if name == "fstfup" : 
            return SESFPtr(msmsc.RS_fstfup_get(self))
        if name == "lstfup" : 
            return SESFPtr(msmsc.RS_lstfup_get(self))
        if name == "fsteup" : 
            return SESEPtr(msmsc.RS_fsteup_get(self))
        if name == "lsteup" : 
            return SESEPtr(msmsc.RS_lsteup_get(self))
        if name == "uprbRBHT" : 
            return msmsc.RS_uprbRBHT_get(self)
        if name == "sprbRBHT" : 
            return msmsc.RS_sprbRBHT_get(self)
        if name == "data" : 
            return msmsc.RS_data_get(self)
        if name == "nbfcp" : 
            return msmsc.RS_nbfcp_get(self)
        if name == "nbfco" : 
            return msmsc.RS_nbfco_get(self)
        if name == "nbf" : 
            return msmsc.RS_nbf_get(self)
        if name == "nba" : 
            return msmsc.RS_nba_get(self)
        if name == "nbaf" : 
            return msmsc.RS_nbaf_get(self)
        if name == "nbs" : 
            return msmsc.RS_nbs_get(self)
        if name == "num" : 
            return msmsc.RS_num_get(self)
        if name == "ffat" : 
            return msmsc.RS_ffat_get(self)
        if name == "needFreeEdgeCheck" : 
            return msmsc.RS_needFreeEdgeCheck_get(self)
        if name == "split_rsv" : 
            return msmsc.RS_split_rsv_get(self)
        raise AttributeError,name
    def __repr__(self):
        return "<C RS instance at %s>" % (self.this,)
class RS(RSPtr):
    """RS header   
"""
    def __init__(self,this):
        self.this = this




class RSRPtr :
    def __init__(self,this):
        self.this = this
        self.thisown = 0
    def set_ffat(self, *_args, **_kwargs):
        """"""
        val = apply(msmsc.RSR_set_ffat,(self,) + _args, _kwargs)
        return val
    def _ffat(self, *_args, **_kwargs):
        """"""
        val = apply(msmsc.RSR__ffat,(self,) + _args, _kwargs)
        return val
    def __setattr__(self,name,value):
        if name == "fst" :
            msmsc.RSR_fst_set(self,value.this)
            return
        if name == "lst" :
            msmsc.RSR_lst_set(self,value.this)
            return
        if name == "atm" :
            msmsc.RSR_atm_set(self,value.this)
            return
        if name == "atmBHT" :
            msmsc.RSR_atmBHT_set(self,value)
            return
        if name == "nb" :
            msmsc.RSR_nb_set(self,value)
            return
        if name == "nb_free_vert" :
            msmsc.RSR_nb_free_vert_set(self,value)
            return
        if name == "ffnba" :
            msmsc.RSR_ffnba_set(self,value)
            return
        if name == "ffat" :
            msmsc.RSR_ffat_set(self,value)
            return
        if name == "all_comp_done" :
            msmsc.RSR_all_comp_done_set(self,value)
            return
        if name == "ext_comp_done" :
            msmsc.RSR_ext_comp_done_set(self,value)
            return
        self.__dict__[name] = value
    def __getattr__(self,name):
        if name == "fst" : 
            return RSPtr(msmsc.RSR_fst_get(self))
        if name == "lst" : 
            return RSPtr(msmsc.RSR_lst_get(self))
        if name == "atm" : 
            return RSVPtr(msmsc.RSR_atm_get(self))
        if name == "atmBHT" : 
            return msmsc.RSR_atmBHT_get(self)
        if name == "nb" : 
            return msmsc.RSR_nb_get(self)
        if name == "nb_free_vert" : 
            return msmsc.RSR_nb_free_vert_get(self)
        if name == "ffnba" : 
            return msmsc.RSR_ffnba_get(self)
        if name == "ffat" : 
            return msmsc.RSR_ffat_get(self)
        if name == "all_comp_done" : 
            return msmsc.RSR_all_comp_done_get(self)
        if name == "ext_comp_done" : 
            return msmsc.RSR_ext_comp_done_get(self)
        raise AttributeError,name
    def __repr__(self):
        return "<C RSR instance at %s>" % (self.this,)
class RSR(RSRPtr):
    """RS tree root   
"""
    def __init__(self,this):
        self.this = this




class TRIVPtr :
    def __init__(self,this):
        self.this = this
        self.thisown = 0
    def _c(self, *_args, **_kwargs):
        """"""
        val = apply(msmsc.TRIV__c,(self,) + _args, _kwargs)
        return val
    def _n(self, *_args, **_kwargs):
        """"""
        val = apply(msmsc.TRIV__n,(self,) + _args, _kwargs)
        return val
    def _uvw(self, *_args, **_kwargs):
        """"""
        val = apply(msmsc.TRIV__uvw,(self,) + _args, _kwargs)
        return val
    def __setattr__(self,name,value):
        if name == "c" :
            msmsc.TRIV_c_set(self,value)
            return
        if name == "n" :
            msmsc.TRIV_n_set(self,value)
            return
        if name == "uvw" :
            msmsc.TRIV_uvw_set(self,value)
            return
        if name == "sesArea" :
            msmsc.TRIV_sesArea_set(self,value)
            return
        if name == "sasArea" :
            msmsc.TRIV_sasArea_set(self,value)
            return
        if name == "atm" :
            msmsc.TRIV_atm_set(self,value)
            return
        if name == "tvn" :
            msmsc.TRIV_tvn_set(self,value)
            return
        if name == "fl" :
            msmsc.TRIV_fl_set(self,value)
            return
        self.__dict__[name] = value
    def __getattr__(self,name):
        if name == "c" : 
            return msmsc.TRIV_c_get(self)
        if name == "n" : 
            return msmsc.TRIV_n_get(self)
        if name == "uvw" : 
            return msmsc.TRIV_uvw_get(self)
        if name == "sesArea" : 
            return msmsc.TRIV_sesArea_get(self)
        if name == "sasArea" : 
            return msmsc.TRIV_sasArea_get(self)
        if name == "atm" : 
            return msmsc.TRIV_atm_get(self)
        if name == "tvn" : 
            return msmsc.TRIV_tvn_get(self)
        if name == "fl" : 
            return msmsc.TRIV_fl_get(self)
        raise AttributeError,name
    def __repr__(self):
        return "<C TRIV instance at %s>" % (self.this,)
class TRIV(TRIVPtr):
    """"""
    def __init__(self,this):
        self.this = this




class TRIPtr :
    def __init__(self,this):
        self.this = this
        self.thisown = 0
    def _s0(self, *_args, **_kwargs):
        """"""
        val = apply(msmsc.TRI__s0,(self,) + _args, _kwargs)
        if val: val = TRIVPtr(val) 
        return val
    def _s1(self, *_args, **_kwargs):
        """"""
        val = apply(msmsc.TRI__s1,(self,) + _args, _kwargs)
        if val: val = TRIVPtr(val) 
        return val
    def _s2(self, *_args, **_kwargs):
        """"""
        val = apply(msmsc.TRI__s2,(self,) + _args, _kwargs)
        if val: val = TRIVPtr(val) 
        return val
    def __setattr__(self,name,value):
        if name == "s" :
            msmsc.TRI_s_set(self,value)
            return
        self.__dict__[name] = value
    def __getattr__(self,name):
        if name == "s" : 
            return msmsc.TRI_s_get(self)
        raise AttributeError,name
    def __repr__(self):
        return "<C TRI instance at %s>" % (self.this,)
class TRI(TRIPtr):
    """"""
    def __init__(self,this):
        self.this = this




class SESVPtr :
    def __init__(self,this):
        self.this = this
        self.thisown = 0
    def get_a(self, *_args, **_kwargs):
        """"""
        val = apply(msmsc.SESV_get_a,(self,) + _args, _kwargs)
        if val: val = SESEPtr(val) 
        return val
    def _c(self, *_args, **_kwargs):
        """"""
        val = apply(msmsc.SESV__c,(self,) + _args, _kwargs)
        return val
    def _n(self, *_args, **_kwargs):
        """"""
        val = apply(msmsc.SESV__n,(self,) + _args, _kwargs)
        return val
    def __setattr__(self,name,value):
        if name == "nxt" :
            msmsc.SESV_nxt_set(self,value.this)
            return
        if name == "prv" :
            msmsc.SESV_prv_set(self,value.this)
            return
        if name == "id" :
            msmsc.SESV_id_set(self,value.this)
            return
        if name == "a" :
            msmsc.SESV_a_set(self,value)
            return
        if name == "data" :
            msmsc.SESV_data_set(self,value)
            return
        if name == "n" :
            msmsc.SESV_n_set(self,value)
            return
        if name == "c" :
            msmsc.SESV_c_set(self,value)
            return
        if name == "beta" :
            msmsc.SESV_beta_set(self,value)
            return
        if name == "num" :
            msmsc.SESV_num_set(self,value)
            return
        if name == "at" :
            msmsc.SESV_at_set(self,value)
            return
        if name == "nba" :
            msmsc.SESV_nba_set(self,value)
            return
        if name == "mnba" :
            msmsc.SESV_mnba_set(self,value)
            return
        if name == "triv" :
            msmsc.SESV_triv_set(self,value.this)
            return
        if name == "type" :
            msmsc.SESV_type_set(self,value)
            return
        self.__dict__[name] = value
    def __getattr__(self,name):
        if name == "nxt" : 
            return SESVPtr(msmsc.SESV_nxt_get(self))
        if name == "prv" : 
            return SESVPtr(msmsc.SESV_prv_get(self))
        if name == "id" : 
            return SESVPtr(msmsc.SESV_id_get(self))
        if name == "a" : 
            return msmsc.SESV_a_get(self)
        if name == "data" : 
            return msmsc.SESV_data_get(self)
        if name == "n" : 
            return msmsc.SESV_n_get(self)
        if name == "c" : 
            return msmsc.SESV_c_get(self)
        if name == "beta" : 
            return msmsc.SESV_beta_get(self)
        if name == "num" : 
            return msmsc.SESV_num_get(self)
        if name == "at" : 
            return msmsc.SESV_at_get(self)
        if name == "nba" : 
            return msmsc.SESV_nba_get(self)
        if name == "mnba" : 
            return msmsc.SESV_mnba_get(self)
        if name == "triv" : 
            return TRIVPtr(msmsc.SESV_triv_get(self))
        if name == "type" : 
            return msmsc.SESV_type_get(self)
        raise AttributeError,name
    def __repr__(self):
        return "<C SESV instance at %s>" % (self.this,)
class SESV(SESVPtr):
    """"""
    def __init__(self,this):
        self.this = this




class SESEPtr :
    def __init__(self,this):
        self.this = this
        self.thisown = 0
    def _s0(self, *_args, **_kwargs):
        """"""
        val = apply(msmsc.SESE__s0,(self,) + _args, _kwargs)
        if val: val = SESVPtr(val) 
        return val
    def _s1(self, *_args, **_kwargs):
        """"""
        val = apply(msmsc.SESE__s1,(self,) + _args, _kwargs)
        if val: val = SESVPtr(val) 
        return val
    def _f0(self, *_args, **_kwargs):
        """"""
        val = apply(msmsc.SESE__f0,(self,) + _args, _kwargs)
        if val: val = SESFPtr(val) 
        return val
    def _f1(self, *_args, **_kwargs):
        """"""
        val = apply(msmsc.SESE__f1,(self,) + _args, _kwargs)
        if val: val = SESFPtr(val) 
        return val
    def get_triv(self, *_args, **_kwargs):
        """"""
        val = apply(msmsc.SESE_get_triv,(self,) + _args, _kwargs)
        if val: val = TRIVPtr(val) 
        return val
    def _n(self, *_args, **_kwargs):
        """"""
        val = apply(msmsc.SESE__n,(self,) + _args, _kwargs)
        return val
    def _c(self, *_args, **_kwargs):
        """"""
        val = apply(msmsc.SESE__c,(self,) + _args, _kwargs)
        return val
    def __setattr__(self,name,value):
        if name == "nxt" :
            msmsc.SESE_nxt_set(self,value.this)
            return
        if name == "prv" :
            msmsc.SESE_prv_set(self,value.this)
            return
        if name == "s" :
            msmsc.SESE_s_set(self,value)
            return
        if name == "f" :
            msmsc.SESE_f_set(self,value)
            return
        if name == "ar" :
            msmsc.SESE_ar_set(self,value.this)
            return
        if name == "triv" :
            msmsc.SESE_triv_set(self,value)
            return
        if name == "nxtSESaUp" :
            msmsc.SESE_nxtSESaUp_set(self,value.this)
            return
        if name == "data" :
            msmsc.SESE_data_set(self,value)
            return
        if name == "n" :
            msmsc.SESE_n_set(self,value)
            return
        if name == "c" :
            msmsc.SESE_c_set(self,value)
            return
        if name == "r" :
            msmsc.SESE_r_set(self,value)
            return
        if name == "theta" :
            msmsc.SESE_theta_set(self,value)
            return
        if name == "free_cap_area" :
            msmsc.SESE_free_cap_area_set(self,value)
            return
        if name == "ang" :
            msmsc.SESE_ang_set(self,value)
            return
        if name == "nbtriv" :
            msmsc.SESE_nbtriv_set(self,value)
            return
        if name == "num" :
            msmsc.SESE_num_set(self,value)
            return
        if name == "type" :
            msmsc.SESE_type_set(self,value)
            return
        if name == "cont_num" :
            msmsc.SESE_cont_num_set(self,value)
            return
        self.__dict__[name] = value
    def __getattr__(self,name):
        if name == "nxt" : 
            return SESEPtr(msmsc.SESE_nxt_get(self))
        if name == "prv" : 
            return SESEPtr(msmsc.SESE_prv_get(self))
        if name == "s" : 
            return msmsc.SESE_s_get(self)
        if name == "f" : 
            return msmsc.SESE_f_get(self)
        if name == "ar" : 
            return RSEPtr(msmsc.SESE_ar_get(self))
        if name == "triv" : 
            return msmsc.SESE_triv_get(self)
        if name == "nxtSESaUp" : 
            return SESEPtr(msmsc.SESE_nxtSESaUp_get(self))
        if name == "data" : 
            return msmsc.SESE_data_get(self)
        if name == "n" : 
            return msmsc.SESE_n_get(self)
        if name == "c" : 
            return msmsc.SESE_c_get(self)
        if name == "r" : 
            return msmsc.SESE_r_get(self)
        if name == "theta" : 
            return msmsc.SESE_theta_get(self)
        if name == "free_cap_area" : 
            return msmsc.SESE_free_cap_area_get(self)
        if name == "ang" : 
            return msmsc.SESE_ang_get(self)
        if name == "nbtriv" : 
            return msmsc.SESE_nbtriv_get(self)
        if name == "num" : 
            return msmsc.SESE_num_get(self)
        if name == "type" : 
            return msmsc.SESE_type_get(self)
        if name == "cont_num" : 
            return msmsc.SESE_cont_num_get(self)
        raise AttributeError,name
    def __repr__(self):
        return "<C SESE instance at %s>" % (self.this,)
class SESE(SESEPtr):
    """"""
    def __init__(self,this):
        self.this = this




class SESFPtr :
    def __init__(self,this):
        self.this = this
        self.thisown = 0
    def get_a(self, *_args, **_kwargs):
        """"""
        val = apply(msmsc.SESF_get_a,(self,) + _args, _kwargs)
        if val: val = SESEPtr(val) 
        return val
    def get_tri(self, *_args, **_kwargs):
        """"""
        val = apply(msmsc.SESF_get_tri,(self,) + _args, _kwargs)
        if val: val = TRIPtr(val) 
        return val
    def get_triv(self, *_args, **_kwargs):
        """"""
        val = apply(msmsc.SESF_get_triv,(self,) + _args, _kwargs)
        if val: val = TRIVPtr(val) 
        return val
    def get_direct(self, *_args, **_kwargs):
        """"""
        val = apply(msmsc.SESF_get_direct,(self,) + _args, _kwargs)
        return val
    def __setattr__(self,name,value):
        if name == "nxt" :
            msmsc.SESF_nxt_set(self,value.this)
            return
        if name == "prv" :
            msmsc.SESF_prv_set(self,value.this)
            return
        if name == "s" :
            msmsc.SESF_s_set(self,value)
            return
        if name == "a" :
            msmsc.SESF_a_set(self,value)
            return
        if name == "nxtUp" :
            msmsc.SESF_nxtUp_set(self,value.this)
            return
        if name == "nxttorUp" :
            msmsc.SESF_nxttorUp_set(self,value.this)
            return
        if name == "nxttUp" :
            msmsc.SESF_nxttUp_set(self,value.this)
            return
        if name == "dual" :
            msmsc.SESF_dual_set(self,value)
            return
        if name == "data" :
            msmsc.SESF_data_set(self,value)
            return
        if name == "tri" :
            msmsc.SESF_tri_set(self,value.this)
            return
        if name == "triv" :
            msmsc.SESF_triv_set(self,value)
            return
        if name == "buried" :
            msmsc.SESF_buried_set(self,value)
            return
        if name == "a_ses_area" :
            msmsc.SESF_a_ses_area_set(self,value)
            return
        if name == "nbtri" :
            msmsc.SESF_nbtri_set(self,value)
            return
        if name == "nbtriv" :
            msmsc.SESF_nbtriv_set(self,value)
            return
        if name == "num" :
            msmsc.SESF_num_set(self,value)
            return
        if name == "nb" :
            msmsc.SESF_nb_set(self,value)
            return
        if name == "nba" :
            msmsc.SESF_nba_set(self,value)
            return
        if name == "type" :
            msmsc.SESF_type_set(self,value)
            return
        if name == "pb" :
            msmsc.SESF_pb_set(self,value)
            return
        if name == "fl" :
            msmsc.SESF_fl_set(self,value)
            return
        if name == "cont_nb" :
            msmsc.SESF_cont_nb_set(self,value)
            return
        if name == "direct" :
            msmsc.SESF_direct_set(self,value)
            return
        if name == "nbtriv_iso" :
            msmsc.SESF_nbtriv_iso_set(self,value)
            return
        self.__dict__[name] = value
    def __getattr__(self,name):
        if name == "nxt" : 
            return SESFPtr(msmsc.SESF_nxt_get(self))
        if name == "prv" : 
            return SESFPtr(msmsc.SESF_prv_get(self))
        if name == "s" : 
            return msmsc.SESF_s_get(self)
        if name == "a" : 
            return msmsc.SESF_a_get(self)
        if name == "nxtUp" : 
            return SESFPtr(msmsc.SESF_nxtUp_get(self))
        if name == "nxttorUp" : 
            return SESFPtr(msmsc.SESF_nxttorUp_get(self))
        if name == "nxttUp" : 
            return SESFPtr(msmsc.SESF_nxttUp_get(self))
        if name == "dual" : 
            return msmsc.SESF_dual_get(self)
        if name == "data" : 
            return msmsc.SESF_data_get(self)
        if name == "tri" : 
            return TRIPtr(msmsc.SESF_tri_get(self))
        if name == "triv" : 
            return msmsc.SESF_triv_get(self)
        if name == "buried" : 
            return msmsc.SESF_buried_get(self)
        if name == "a_ses_area" : 
            return msmsc.SESF_a_ses_area_get(self)
        if name == "nbtri" : 
            return msmsc.SESF_nbtri_get(self)
        if name == "nbtriv" : 
            return msmsc.SESF_nbtriv_get(self)
        if name == "num" : 
            return msmsc.SESF_num_get(self)
        if name == "nb" : 
            return msmsc.SESF_nb_get(self)
        if name == "nba" : 
            return msmsc.SESF_nba_get(self)
        if name == "type" : 
            return msmsc.SESF_type_get(self)
        if name == "pb" : 
            return msmsc.SESF_pb_get(self)
        if name == "fl" : 
            return msmsc.SESF_fl_get(self)
        if name == "cont_nb" : 
            return msmsc.SESF_cont_nb_get(self)
        if name == "direct" : 
            return msmsc.SESF_direct_get(self)
        if name == "nbtriv_iso" : 
            return msmsc.SESF_nbtriv_iso_get(self)
        raise AttributeError,name
    def __repr__(self):
        return "<C SESF instance at %s>" % (self.this,)
class SESF(SESFPtr):
    """"""
    def __init__(self,this):
        self.this = this




class SESPtr :
    def __init__(self,this):
        self.this = this
        self.thisown = 0
    def _nbft(self, *_args, **_kwargs):
        """"""
        val = apply(msmsc.SES__nbft,(self,) + _args, _kwargs)
        return val
    def __setattr__(self,name,value):
        if name == "nxt" :
            msmsc.SES_nxt_set(self,value.this)
            return
        if name == "prv" :
            msmsc.SES_prv_set(self,value.this)
            return
        if name == "ffa" :
            msmsc.SES_ffa_set(self,value.this)
            return
        if name == "lfa" :
            msmsc.SES_lfa_set(self,value.this)
            return
        if name == "far" :
            msmsc.SES_far_set(self,value.this)
            return
        if name == "lar" :
            msmsc.SES_lar_set(self,value.this)
            return
        if name == "fso" :
            msmsc.SES_fso_set(self,value.this)
            return
        if name == "lso" :
            msmsc.SES_lso_set(self,value.this)
            return
        if name == "lsesf" :
            msmsc.SES_lsesf_set(self,value.this)
            return
        if name == "fsttfup" :
            msmsc.SES_fsttfup_set(self,value.this)
            return
        if name == "lsttfup" :
            msmsc.SES_lsttfup_set(self,value.this)
            return
        if name == "fsttorup" :
            msmsc.SES_fsttorup_set(self,value.this)
            return
        if name == "lsttorup" :
            msmsc.SES_lsttorup_set(self,value.this)
            return
        if name == "lsese" :
            msmsc.SES_lsese_set(self,value.this)
            return
        if name == "lsesv" :
            msmsc.SES_lsesv_set(self,value.this)
            return
        if name == "data" :
            msmsc.SES_data_set(self,value)
            return
        if name == "nbf" :
            msmsc.SES_nbf_set(self,value)
            return
        if name == "nba" :
            msmsc.SES_nba_set(self,value)
            return
        if name == "nbs" :
            msmsc.SES_nbs_set(self,value)
            return
        if name == "nbss" :
            msmsc.SES_nbss_set(self,value)
            return
        if name == "nbse" :
            msmsc.SES_nbse_set(self,value)
            return
        if name == "nbft" :
            msmsc.SES_nbft_set(self,value)
            return
        if name == "num" :
            msmsc.SES_num_set(self,value)
            return
        if name == "holes_reent" :
            msmsc.SES_holes_reent_set(self,value)
            return
        if name == "holes_cont" :
            msmsc.SES_holes_cont_set(self,value)
            return
        if name == "nb_comp" :
            msmsc.SES_nb_comp_set(self,value)
            return
        if name == "a_reent_area" :
            msmsc.SES_a_reent_area_set(self,value)
            return
        if name == "a_toric_area" :
            msmsc.SES_a_toric_area_set(self,value)
            return
        if name == "a_contact_area" :
            msmsc.SES_a_contact_area_set(self,value)
            return
        if name == "a_ses_area" :
            msmsc.SES_a_ses_area_set(self,value)
            return
        if name == "a_sas_area" :
            msmsc.SES_a_sas_area_set(self,value)
            return
        if name == "a_ses_volume" :
            msmsc.SES_a_ses_volume_set(self,value)
            return
        if name == "a_sas_volume" :
            msmsc.SES_a_sas_volume_set(self,value)
            return
        if name == "a_buried_ses_area" :
            msmsc.SES_a_buried_ses_area_set(self,value)
            return
        if name == "a_buried_sas_area" :
            msmsc.SES_a_buried_sas_area_set(self,value)
            return
        if name == "density" :
            msmsc.SES_density_set(self,value)
            return
        if name == "density_sq" :
            msmsc.SES_density_sq_set(self,value)
            return
        if name == "cercang" :
            msmsc.SES_cercang_set(self,value)
            return
        if name == "npcerc" :
            msmsc.SES_npcerc_set(self,value)
            return
        if name == "nbtri1" :
            msmsc.SES_nbtri1_set(self,value)
            return
        if name == "nbtri2" :
            msmsc.SES_nbtri2_set(self,value)
            return
        if name == "nbtri3" :
            msmsc.SES_nbtri3_set(self,value)
            return
        if name == "nbtri" :
            msmsc.SES_nbtri_set(self,value)
            return
        if name == "nbtriv" :
            msmsc.SES_nbtriv_set(self,value)
            return
        if name == "nbtriv_iso" :
            msmsc.SES_nbtriv_iso_set(self,value)
            return
        if name == "tri_cont" :
            msmsc.SES_tri_cont_set(self,value)
            return
        if name == "n_area_mode" :
            msmsc.SES_n_area_mode_set(self,value)
            return
        if name == "n_ses_area" :
            msmsc.SES_n_ses_area_set(self,value)
            return
        if name == "n_sas_area" :
            msmsc.SES_n_sas_area_set(self,value)
            return
        if name == "n_buried_ses_area" :
            msmsc.SES_n_buried_ses_area_set(self,value)
            return
        if name == "n_buried_sas_area" :
            msmsc.SES_n_buried_sas_area_set(self,value)
            return
        if name == "n_ses_volume" :
            msmsc.SES_n_ses_volume_set(self,value)
            return
        if name == "n_sas_volume" :
            msmsc.SES_n_sas_volume_set(self,value)
            return
        if name == "genusAna" :
            msmsc.SES_genusAna_set(self,value)
            return
        if name == "genusTri" :
            msmsc.SES_genusTri_set(self,value)
            return
        if name == "tmprb" :
            msmsc.SES_tmprb_set(self,value)
            return
        self.__dict__[name] = value
    def __getattr__(self,name):
        if name == "nxt" : 
            return SESPtr(msmsc.SES_nxt_get(self))
        if name == "prv" : 
            return SESPtr(msmsc.SES_prv_get(self))
        if name == "ffa" : 
            return SESFPtr(msmsc.SES_ffa_get(self))
        if name == "lfa" : 
            return SESFPtr(msmsc.SES_lfa_get(self))
        if name == "far" : 
            return SESEPtr(msmsc.SES_far_get(self))
        if name == "lar" : 
            return SESEPtr(msmsc.SES_lar_get(self))
        if name == "fso" : 
            return SESVPtr(msmsc.SES_fso_get(self))
        if name == "lso" : 
            return SESVPtr(msmsc.SES_lso_get(self))
        if name == "lsesf" : 
            return SESFPtr(msmsc.SES_lsesf_get(self))
        if name == "fsttfup" : 
            return SESFPtr(msmsc.SES_fsttfup_get(self))
        if name == "lsttfup" : 
            return SESFPtr(msmsc.SES_lsttfup_get(self))
        if name == "fsttorup" : 
            return SESFPtr(msmsc.SES_fsttorup_get(self))
        if name == "lsttorup" : 
            return SESFPtr(msmsc.SES_lsttorup_get(self))
        if name == "lsese" : 
            return SESEPtr(msmsc.SES_lsese_get(self))
        if name == "lsesv" : 
            return SESVPtr(msmsc.SES_lsesv_get(self))
        if name == "data" : 
            return msmsc.SES_data_get(self)
        if name == "nbf" : 
            return msmsc.SES_nbf_get(self)
        if name == "nba" : 
            return msmsc.SES_nba_get(self)
        if name == "nbs" : 
            return msmsc.SES_nbs_get(self)
        if name == "nbss" : 
            return msmsc.SES_nbss_get(self)
        if name == "nbse" : 
            return msmsc.SES_nbse_get(self)
        if name == "nbft" : 
            return msmsc.SES_nbft_get(self)
        if name == "num" : 
            return msmsc.SES_num_get(self)
        if name == "holes_reent" : 
            return msmsc.SES_holes_reent_get(self)
        if name == "holes_cont" : 
            return msmsc.SES_holes_cont_get(self)
        if name == "nb_comp" : 
            return msmsc.SES_nb_comp_get(self)
        if name == "a_reent_area" : 
            return msmsc.SES_a_reent_area_get(self)
        if name == "a_toric_area" : 
            return msmsc.SES_a_toric_area_get(self)
        if name == "a_contact_area" : 
            return msmsc.SES_a_contact_area_get(self)
        if name == "a_ses_area" : 
            return msmsc.SES_a_ses_area_get(self)
        if name == "a_sas_area" : 
            return msmsc.SES_a_sas_area_get(self)
        if name == "a_ses_volume" : 
            return msmsc.SES_a_ses_volume_get(self)
        if name == "a_sas_volume" : 
            return msmsc.SES_a_sas_volume_get(self)
        if name == "a_buried_ses_area" : 
            return msmsc.SES_a_buried_ses_area_get(self)
        if name == "a_buried_sas_area" : 
            return msmsc.SES_a_buried_sas_area_get(self)
        if name == "density" : 
            return msmsc.SES_density_get(self)
        if name == "density_sq" : 
            return msmsc.SES_density_sq_get(self)
        if name == "cercang" : 
            return msmsc.SES_cercang_get(self)
        if name == "npcerc" : 
            return msmsc.SES_npcerc_get(self)
        if name == "nbtri1" : 
            return msmsc.SES_nbtri1_get(self)
        if name == "nbtri2" : 
            return msmsc.SES_nbtri2_get(self)
        if name == "nbtri3" : 
            return msmsc.SES_nbtri3_get(self)
        if name == "nbtri" : 
            return msmsc.SES_nbtri_get(self)
        if name == "nbtriv" : 
            return msmsc.SES_nbtriv_get(self)
        if name == "nbtriv_iso" : 
            return msmsc.SES_nbtriv_iso_get(self)
        if name == "tri_cont" : 
            return msmsc.SES_tri_cont_get(self)
        if name == "n_area_mode" : 
            return msmsc.SES_n_area_mode_get(self)
        if name == "n_ses_area" : 
            return msmsc.SES_n_ses_area_get(self)
        if name == "n_sas_area" : 
            return msmsc.SES_n_sas_area_get(self)
        if name == "n_buried_ses_area" : 
            return msmsc.SES_n_buried_ses_area_get(self)
        if name == "n_buried_sas_area" : 
            return msmsc.SES_n_buried_sas_area_get(self)
        if name == "n_ses_volume" : 
            return msmsc.SES_n_ses_volume_get(self)
        if name == "n_sas_volume" : 
            return msmsc.SES_n_sas_volume_get(self)
        if name == "genusAna" : 
            return msmsc.SES_genusAna_get(self)
        if name == "genusTri" : 
            return msmsc.SES_genusTri_get(self)
        if name == "tmprb" : 
            return msmsc.SES_tmprb_get(self)
        raise AttributeError,name
    def __repr__(self):
        return "<C SES instance at %s>" % (self.this,)
class SES(SESPtr):
    """"""
    def __init__(self,this):
        self.this = this




class SESRPtr :
    def __init__(self,this):
        self.this = this
        self.thisown = 0
    def __setattr__(self,name,value):
        if name == "fst" :
            msmsc.SESR_fst_set(self,value.this)
            return
        if name == "lst" :
            msmsc.SESR_lst_set(self,value.this)
            return
        if name == "nb" :
            msmsc.SESR_nb_set(self,value)
            return
        self.__dict__[name] = value
    def __getattr__(self,name):
        if name == "fst" : 
            return SESPtr(msmsc.SESR_fst_get(self))
        if name == "lst" : 
            return SESPtr(msmsc.SESR_lst_get(self))
        if name == "nb" : 
            return msmsc.SESR_nb_get(self)
        raise AttributeError,name
    def __repr__(self):
        return "<C SESR instance at %s>" % (self.this,)
class SESR(SESRPtr):
    """"""
    def __init__(self,this):
        self.this = this




class MOLSRFPtr :
    def __init__(self,this):
        self.this = this
        self.thisown = 0
    def _extreme(self, *_args, **_kwargs):
        """"""
        val = apply(msmsc.MOLSRF__extreme,(self,) + _args, _kwargs)
        return val
    def get_atm(self, *_args, **_kwargs):
        """"""
        val = apply(msmsc.MOLSRF_get_atm,(self,) + _args, _kwargs)
        if val: val = RSVPtr(val) 
        return val
    def __del__(self,msmsc=msmsc):
        if self.thisown == 1 :
            msmsc.delete_MOLSRF(self)
    def findBuriedVertices(self, *_args, **_kwargs):
        """"""
        val = apply(msmsc.MOLSRF_findBuriedVertices,(self,) + _args, _kwargs)
        return val
    def __setattr__(self,name,value):
        if name == "name" :
            msmsc.MOLSRF_name_set(self,value)
            return
        if name == "rsr" :
            msmsc.MOLSRF_rsr_set(self,value.this)
            return
        if name == "sesr" :
            msmsc.MOLSRF_sesr_set(self,value.this)
            return
        if name == "data" :
            msmsc.MOLSRF_data_set(self,value)
            return
        if name == "maxr" :
            msmsc.MOLSRF_maxr_set(self,value)
            return
        if name == "minr" :
            msmsc.MOLSRF_minr_set(self,value)
            return
        if name == "extreme" :
            msmsc.MOLSRF_extreme_set(self,value)
            return
        if name == "nbat" :
            msmsc.MOLSRF_nbat_set(self,value)
            return
        if name == "nats" :
            msmsc.MOLSRF_nats_set(self,value)
            return
        if name == "natc" :
            msmsc.MOLSRF_natc_set(self,value)
            return
        if name == "maxat" :
            msmsc.MOLSRF_maxat_set(self,value)
            return
        if name == "filename" :
            msmsc.MOLSRF_filename_set(self,value)
            return
        if name == "rp" :
            msmsc.MOLSRF_rp_set(self,value)
            return
        if name == "rp1" :
            msmsc.MOLSRF_rp1_set(self,value)
            return
        if name == "density" :
            msmsc.MOLSRF_density_set(self,value)
            return
        if name == "tmtab" :
            msmsc.MOLSRF_tmtab_set(self,value)
            return
        if name == "dots" :
            msmsc.MOLSRF_dots_set(self,value)
            return
        if name == "Maxnbt" :
            msmsc.MOLSRF_Maxnbt_set(self,value)
            return
        if name == "nbt" :
            msmsc.MOLSRF_nbt_set(self,value)
            return
        if name == "MaxDots" :
            msmsc.MOLSRF_MaxDots_set(self,value)
            return
        if name == "MaxEdges" :
            msmsc.MOLSRF_MaxEdges_set(self,value)
            return
        if name == "MaxTriangles" :
            msmsc.MOLSRF_MaxTriangles_set(self,value)
            return
        if name == "allocated_MaxDots" :
            msmsc.MOLSRF_allocated_MaxDots_set(self,value)
            return
        if name == "MinDistSites2" :
            msmsc.MOLSRF_MinDistSites2_set(self,value)
            return
        if name == "all_components" :
            msmsc.MOLSRF_all_components_set(self,value)
            return
        if name == "free_vert" :
            msmsc.MOLSRF_free_vert_set(self,value)
            return
        if name == "cusp_trim" :
            msmsc.MOLSRF_cusp_trim_set(self,value)
            return
        if name == "noh" :
            msmsc.MOLSRF_noh_set(self,value)
            return
        if name == "dotsOnly" :
            msmsc.MOLSRF_dotsOnly_set(self,value)
            return
        if name == "cleanup_rs" :
            msmsc.MOLSRF_cleanup_rs_set(self,value)
            return
        if name == "cleanup_ses" :
            msmsc.MOLSRF_cleanup_ses_set(self,value)
            return
        if name == "fstup" :
            msmsc.MOLSRF_fstup_set(self,value)
            return
        if name == "up_num" :
            msmsc.MOLSRF_up_num_set(self,value)
            return
        if name == "up_mode" :
            msmsc.MOLSRF_up_mode_set(self,value)
            return
        if name == "up_density" :
            msmsc.MOLSRF_up_density_set(self,value)
            return
        if name == "MS_mfl" :
            msmsc.MOLSRF_MS_mfl_set(self,value)
            return
        if name == "restart_mode" :
            msmsc.MOLSRF_restart_mode_set(self,value)
            return
        if name == "mod_dist" :
            msmsc.MOLSRF_mod_dist_set(self,value)
            return
        if name == "restart_ana" :
            msmsc.MOLSRF_restart_ana_set(self,value)
            return
        if name == "restart_tri" :
            msmsc.MOLSRF_restart_tri_set(self,value)
            return
        if name == "rest_on_pbr" :
            msmsc.MOLSRF_rest_on_pbr_set(self,value)
            return
        if name == "rest_on_pbc" :
            msmsc.MOLSRF_rest_on_pbc_set(self,value)
            return
        if name == "max_try" :
            msmsc.MOLSRF_max_try_set(self,value)
            return
        if name == "try_num" :
            msmsc.MOLSRF_try_num_set(self,value)
            return
        self.__dict__[name] = value
    def __getattr__(self,name):
        if name == "name" : 
            return msmsc.MOLSRF_name_get(self)
        if name == "rsr" : 
            return RSRPtr(msmsc.MOLSRF_rsr_get(self))
        if name == "sesr" : 
            return SESRPtr(msmsc.MOLSRF_sesr_get(self))
        if name == "data" : 
            return msmsc.MOLSRF_data_get(self)
        if name == "maxr" : 
            return msmsc.MOLSRF_maxr_get(self)
        if name == "minr" : 
            return msmsc.MOLSRF_minr_get(self)
        if name == "extreme" : 
            return msmsc.MOLSRF_extreme_get(self)
        if name == "nbat" : 
            return msmsc.MOLSRF_nbat_get(self)
        if name == "nats" : 
            return msmsc.MOLSRF_nats_get(self)
        if name == "natc" : 
            return msmsc.MOLSRF_natc_get(self)
        if name == "maxat" : 
            return msmsc.MOLSRF_maxat_get(self)
        if name == "filename" : 
            return msmsc.MOLSRF_filename_get(self)
        if name == "rp" : 
            return msmsc.MOLSRF_rp_get(self)
        if name == "rp1" : 
            return msmsc.MOLSRF_rp1_get(self)
        if name == "density" : 
            return msmsc.MOLSRF_density_get(self)
        if name == "tmtab" : 
            return msmsc.MOLSRF_tmtab_get(self)
        if name == "dots" : 
            return msmsc.MOLSRF_dots_get(self)
        if name == "Maxnbt" : 
            return msmsc.MOLSRF_Maxnbt_get(self)
        if name == "nbt" : 
            return msmsc.MOLSRF_nbt_get(self)
        if name == "MaxDots" : 
            return msmsc.MOLSRF_MaxDots_get(self)
        if name == "MaxEdges" : 
            return msmsc.MOLSRF_MaxEdges_get(self)
        if name == "MaxTriangles" : 
            return msmsc.MOLSRF_MaxTriangles_get(self)
        if name == "allocated_MaxDots" : 
            return msmsc.MOLSRF_allocated_MaxDots_get(self)
        if name == "MinDistSites2" : 
            return msmsc.MOLSRF_MinDistSites2_get(self)
        if name == "all_components" : 
            return msmsc.MOLSRF_all_components_get(self)
        if name == "free_vert" : 
            return msmsc.MOLSRF_free_vert_get(self)
        if name == "cusp_trim" : 
            return msmsc.MOLSRF_cusp_trim_get(self)
        if name == "noh" : 
            return msmsc.MOLSRF_noh_get(self)
        if name == "dotsOnly" : 
            return msmsc.MOLSRF_dotsOnly_get(self)
        if name == "cleanup_rs" : 
            return msmsc.MOLSRF_cleanup_rs_get(self)
        if name == "cleanup_ses" : 
            return msmsc.MOLSRF_cleanup_ses_get(self)
        if name == "fstup" : 
            return msmsc.MOLSRF_fstup_get(self)
        if name == "up_num" : 
            return msmsc.MOLSRF_up_num_get(self)
        if name == "up_mode" : 
            return msmsc.MOLSRF_up_mode_get(self)
        if name == "up_density" : 
            return msmsc.MOLSRF_up_density_get(self)
        if name == "MS_mfl" : 
            return msmsc.MOLSRF_MS_mfl_get(self)
        if name == "restart_mode" : 
            return msmsc.MOLSRF_restart_mode_get(self)
        if name == "mod_dist" : 
            return msmsc.MOLSRF_mod_dist_get(self)
        if name == "restart_ana" : 
            return msmsc.MOLSRF_restart_ana_get(self)
        if name == "restart_tri" : 
            return msmsc.MOLSRF_restart_tri_get(self)
        if name == "rest_on_pbr" : 
            return msmsc.MOLSRF_rest_on_pbr_get(self)
        if name == "rest_on_pbc" : 
            return msmsc.MOLSRF_rest_on_pbc_get(self)
        if name == "max_try" : 
            return msmsc.MOLSRF_max_try_get(self)
        if name == "try_num" : 
            return msmsc.MOLSRF_try_num_get(self)
        raise AttributeError,name
    def __repr__(self):
        return "<C MOLSRF instance at %s>" % (self.this,)
class MOLSRF(MOLSRFPtr):
    """"""
    def __init__(self,*_args,**_kwargs):
        """"""
        self.this = apply(msmsc.new_MOLSRF,_args,_kwargs)
        self.thisown = 1






#-------------- FUNCTION WRAPPERS ------------------

def MS_detailed_info_molsrf(*_args, **_kwargs):
    """"""
    val = apply(msmsc.MS_detailed_info_molsrf,_args,_kwargs)
    return val

def MS_info_molsrf(*_args, **_kwargs):
    """"""
    val = apply(msmsc.MS_info_molsrf,_args,_kwargs)
    return val

MS_readxyzr = msmsc.MS_readxyzr

def MS_reset_atom_update_flag(*_args, **_kwargs):
    """"""
    val = apply(msmsc.MS_reset_atom_update_flag,_args,_kwargs)
    return val

def MS_get_xyzr_update(*_args, **_kwargs):
    """"""
    val = apply(msmsc.MS_get_xyzr_update,_args,_kwargs)
    return val

def MS_updateSpheres(*_args, **_kwargs):
    """"""
    val = apply(msmsc.MS_updateSpheres,_args,_kwargs)
    return val

def MS_addSpheres(*_args, **_kwargs):
    """"""
    val = apply(msmsc.MS_addSpheres,_args,_kwargs)
    return val

def MS_reduced_surface(*_args, **_kwargs):
    """reduced surface   
"""
    val = apply(msmsc.MS_reduced_surface,_args,_kwargs)
    return val

def MS_update_reduced_surface(*_args, **_kwargs):
    """"""
    val = apply(msmsc.MS_update_reduced_surface,_args,_kwargs)
    return val

def MS_write_rs_component(*_args, **_kwargs):
    """not really useful since I can "walk the pointers" in Python
xtern RS   *MS_find_rs_component_by_num( MOLSRF *ms, int i );
"""
    val = apply(msmsc.MS_write_rs_component,_args,_kwargs)
    return val

def MS_writeSolventAccessibleatoms(*_args, **_kwargs):
    """"""
    val = apply(msmsc.MS_writeSolventAccessibleatoms,_args,_kwargs)
    return val

def MS_reset_RSR(*_args, **_kwargs):
    """"""
    val = apply(msmsc.MS_reset_RSR,_args,_kwargs)
    return val

def MS_free_RS_vertices(*_args, **_kwargs):
    """"""
    val = apply(msmsc.MS_free_RS_vertices,_args,_kwargs)
    return val

def MS_solvent_excluded_surface(*_args, **_kwargs):
    """analytical solvent excluded surface   
"""
    val = apply(msmsc.MS_solvent_excluded_surface,_args,_kwargs)
    return val

def MS_update_ses(*_args, **_kwargs):
    """"""
    val = apply(msmsc.MS_update_ses,_args,_kwargs)
    return val

def MS_compute_SES_area(*_args, **_kwargs):
    """"""
    val = apply(msmsc.MS_compute_SES_area,_args,_kwargs)
    return val

def MS_update_SES_area(*_args, **_kwargs):
    """"""
    val = apply(msmsc.MS_update_SES_area,_args,_kwargs)
    return val

def MS_write_surface_areas(*_args, **_kwargs):
    """not really useful since I can "walk the pointers" in Python
xtern SES   *MS_find_SES_component_by_num( MOLSRF *ms, int i );
"""
    val = apply(msmsc.MS_write_surface_areas,_args,_kwargs)
    return val

def MS_set_SES_density(*_args, **_kwargs):
    """"""
    val = apply(msmsc.MS_set_SES_density,_args,_kwargs)
    return val

def MS_free_SES_comp(*_args, **_kwargs):
    """"""
    val = apply(msmsc.MS_free_SES_comp,_args,_kwargs)
    return val

def MS_reset_SESR(*_args, **_kwargs):
    """"""
    val = apply(msmsc.MS_reset_SESR,_args,_kwargs)
    return val

def MS_make_templates(*_args, **_kwargs):
    """triangulated solvent excluded surface   
"""
    val = apply(msmsc.MS_make_templates,_args,_kwargs)
    return val

def MS_triangulate_SES_component(*_args, **_kwargs):
    """"""
    val = apply(msmsc.MS_triangulate_SES_component,_args,_kwargs)
    return val

def MS_compute_numerical_area_vol(*_args, **_kwargs):
    """"""
    val = apply(msmsc.MS_compute_numerical_area_vol,_args,_kwargs)
    return val

def MS_update_triangulation_SES_component(*_args, **_kwargs):
    """"""
    val = apply(msmsc.MS_update_triangulation_SES_component,_args,_kwargs)
    return val

def MS_write_triangulated_SES_component(*_args, **_kwargs):
    """"""
    val = apply(msmsc.MS_write_triangulated_SES_component,_args,_kwargs)
    return val

def MS_free_templates(*_args, **_kwargs):
    """"""
    val = apply(msmsc.MS_free_templates,_args,_kwargs)
    return val

def MS_free_triangulated_surface(*_args, **_kwargs):
    """"""
    val = apply(msmsc.MS_free_triangulated_surface,_args,_kwargs)
    return val

def MS_resetBuriedVertexFlags(*_args, **_kwargs):
    """buried surface   
"""
    val = apply(msmsc.MS_resetBuriedVertexFlags,_args,_kwargs)
    return val

def MS_resetBuriedVertexArea(*_args, **_kwargs):
    """"""
    val = apply(msmsc.MS_resetBuriedVertexArea,_args,_kwargs)
    return val

def MS_vertexBuriedSurfaceArea(*_args, **_kwargs):
    """ %apply float ARRAY2D[1][4] { float **atm }   
 #int   MS_findBuriedVertices(MOLSRF *ms,SES *su,float **atm, int nbat);   
"""
    val = apply(msmsc.MS_vertexBuriedSurfaceArea,_args,_kwargs)
    return val

def MS_write_coordinates(*_args, **_kwargs):
    """misc   
"""
    val = apply(msmsc.MS_write_coordinates,_args,_kwargs)
    return val

def MS_restore_radii(*_args, **_kwargs):
    """"""
    val = apply(msmsc.MS_restore_radii,_args,_kwargs)
    return val

def MS_printInfo(*_args, **_kwargs):
    """"""
    val = apply(msmsc.MS_printInfo,_args,_kwargs)
    return val

def MS_genus(*_args, **_kwargs):
    """"""
    val = apply(msmsc.MS_genus,_args,_kwargs)
    return val

def MS_tagCloseProbes(*_args, **_kwargs):
    """"""
    val = apply(msmsc.MS_tagCloseProbes,_args,_kwargs)
    return val

def MS_compute_surface(*_args, **_kwargs):
    """"""
    val = apply(msmsc.MS_compute_surface,_args,_kwargs)
    return val

def MS_update_surface(*_args, **_kwargs):
    """"""
    val = apply(msmsc.MS_update_surface,_args,_kwargs)
    return val

def MS_reset_msms_err(*_args, **_kwargs):
    """"""
    val = apply(msmsc.MS_reset_msms_err,_args,_kwargs)
    return val

MS_get_triangles = msmsc.MS_get_triangles



#-------------- VARIABLE WRAPPERS ------------------

MS_RS_SIMPLE_ASCII1 = msmsc.MS_RS_SIMPLE_ASCII1
MS_RS_SIMPLE_ASCII2 = msmsc.MS_RS_SIMPLE_ASCII2
MS_RS_SIMPLE_ASCII1_NORMALS = msmsc.MS_RS_SIMPLE_ASCII1_NORMALS
MS_NON_PARTIAL = msmsc.MS_NON_PARTIAL
MS_PARTIAL = msmsc.MS_PARTIAL
MS_TSES_ASCII = msmsc.MS_TSES_ASCII
MS_ASES_ASCII = msmsc.MS_ASES_ASCII
MS_TSES_ASCII_AVS = msmsc.MS_TSES_ASCII_AVS
MS_ASES_ASCII_AVS = msmsc.MS_ASES_ASCII_AVS
MS_NUMERICAL = msmsc.MS_NUMERICAL
MS_SEMI_ANALYTICAL = msmsc.MS_SEMI_ANALYTICAL
MS_BOTH = msmsc.MS_BOTH
MS_NOT_BURIED = msmsc.MS_NOT_BURIED
MS_BURIED = msmsc.MS_BURIED
MS_PARTIALLY_BURIED = msmsc.MS_PARTIALLY_BURIED
SAILLANT = msmsc.SAILLANT
RENTRANT = msmsc.RENTRANT
TORIQUE = msmsc.TORIQUE
SINGULIER = msmsc.SINGULIER
SINGULIER_TRAITE = msmsc.SINGULIER_TRAITE
SELECT = msmsc.SELECT
FULL_EATEN = msmsc.FULL_EATEN
RENT_FUS = msmsc.RENT_FUS
FULL_TORUS1 = msmsc.FULL_TORUS1
FULL_TORUS2 = msmsc.FULL_TORUS2
MS_OK = msmsc.MS_OK
MS_ERR = msmsc.MS_ERR
MS_ErrMsgMaxLen = msmsc.MS_ErrMsgMaxLen
FULL = msmsc.FULL
TORIC = msmsc.TORIC
ALL_WITH_DENSITY = msmsc.ALL_WITH_DENSITY
NO_TRIANGULATION = msmsc.NO_TRIANGULATION
cvar = msmsc.cvar
